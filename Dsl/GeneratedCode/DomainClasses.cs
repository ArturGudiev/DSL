//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.NamedElement.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.NamedElement.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("2ebb92f6-9499-40eb-8258-97f115170c92")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2ebb92f6, 0x9499, 0x40eb, 0x82, 0x58, 0x97, 0xf1, 0x15, 0x17, 0x0c, 0x92);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xffab557b, 0x9574, 0x4bc2, 0x90, 0xd3, 0x6a, 0x29, 0xc9, 0xc4, 0xf3, 0x5d);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.NamedElement/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.NamedElement/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("ffab557b-9574-4bc2-90d3-6a29c9c4f35d")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass ComponentModel
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("498ff66b-ae7b-4af8-96bc-5df73a773b98")]
	public partial class ComponentModel : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ComponentModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x498ff66b, 0xae7b, 0x4af8, 0x96, 0xbc, 0x5d, 0xf7, 0x3a, 0x77, 0x3b, 0x98);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ComponentModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ComponentModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Company.MobileDSL.ComponentModelHasComments.ComponentModelDomainRoleId);
			}
		}
		#endregion
		#region Controllers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Controllers.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Controller> Controllers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(global::Company.MobileDSL.ComponentModelHasControllers.ComponentModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.Controller.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MobileDSL.Controller sourceController1 = sourceElement as global::Company.MobileDSL.Controller;
			if (sourceController1 != null)
			{
				// Create link for path ComponentModelHasControllers.Controllers
				this.Controllers.Add(sourceController1);

				return;
			}
				
			global::Company.MobileDSL.Comment sourceComment2 = sourceElement as global::Company.MobileDSL.Comment;
			if (sourceComment2 != null)
			{
				// Create link for path ComponentModelHasComments.Comments
				this.Comments.Add(sourceComment2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MobileDSL.Controller sourceController1 = sourceElement as global::Company.MobileDSL.Controller;
			if (sourceController1 != null)
			{
				// Delete link for path ComponentModelHasControllers.Controllers
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.ComponentModelHasControllers.GetLinks((global::Company.MobileDSL.ComponentModel)this, sourceController1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.ComponentModelHasControllers.ComponentModelDomainRoleId, global::Company.MobileDSL.ComponentModelHasControllers.ControllerDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.Comment sourceComment2 = sourceElement as global::Company.MobileDSL.Comment;
			if (sourceComment2 != null)
			{
				// Delete link for path ComponentModelHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.ComponentModelHasComments.GetLinks((global::Company.MobileDSL.ComponentModel)this, sourceComment2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.ComponentModelHasComments.ComponentModelDomainRoleId, global::Company.MobileDSL.ComponentModelHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Controller
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Controller.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Controller.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bb8866e4-0364-4829-9370-590d91c53c94")]
	public partial class Controller : ClassWithPorts
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Controller domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbb8866e4, 0x0364, 0x4829, 0x93, 0x70, 0x59, 0x0d, 0x91, 0xc5, 0x3c, 0x94);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Controller(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Controller(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Kind domain property code
		
		/// <summary>
		/// Kind domain property Id.
		/// </summary>
		public static readonly global::System.Guid KindDomainPropertyId = new global::System.Guid(0x1a3638d1, 0xf772, 0x4430, 0xa2, 0xac, 0x00, 0x82, 0x26, 0xa8, 0x03, 0xea);
		
		/// <summary>
		/// Storage for Kind
		/// </summary>
		private global::System.String kindPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Kind domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Controller/Kind.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Controller/Kind.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("1a3638d1-f772-4430-a2ac-008226a803ea")]
		public global::System.String Kind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return kindPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KindPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Controller.Kind domain property.
		/// </summary>
		internal sealed partial class KindPropertyHandler : DslModeling::DomainPropertyValueHandler<Controller, global::System.String>
		{
			private KindPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Controller.Kind domain property value handler.
			/// </summary>
			public static readonly KindPropertyHandler Instance = new KindPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Controller.Kind domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KindDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Controller element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.kindPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Controller element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.kindPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region isFirst domain property code
		
		/// <summary>
		/// isFirst domain property Id.
		/// </summary>
		public static readonly global::System.Guid isFirstDomainPropertyId = new global::System.Guid(0xbc8f3b2c, 0xa70e, 0x4f1e, 0x86, 0xa8, 0xc2, 0xf3, 0xba, 0xa4, 0xa2, 0x14);
		
		/// <summary>
		/// Storage for isFirst
		/// </summary>
		private global::System.Boolean isFirstPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of isFirst domain property.
		/// Description for Company.MobileDSL.Controller.Is First
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Controller/isFirst.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Controller/isFirst.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bc8f3b2c-a70e-4f1e-86a8-c2f3baa4a214")]
		public global::System.Boolean isFirst
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isFirstPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				isFirstPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Controller.isFirst domain property.
		/// </summary>
		internal sealed partial class isFirstPropertyHandler : DslModeling::DomainPropertyValueHandler<Controller, global::System.Boolean>
		{
			private isFirstPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Controller.isFirst domain property value handler.
			/// </summary>
			public static readonly isFirstPropertyHandler Instance = new isFirstPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Controller.isFirst domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return isFirstDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Controller element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isFirstPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Controller element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isFirstPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ComponentModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ComponentModel.
		/// </summary>
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.ComponentModelHasControllers.ControllerDomainRoleId) as ComponentModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.ComponentModelHasControllers.ControllerDomainRoleId, value);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Company.MobileDSL.CommentReferencesSubjects.SubjectDomainRoleId);
			}
		}
		#endregion
		#region States opposite domain role accessor
		
		/// <summary>
		/// Gets a list of States.
		/// Description for Company.MobileDSL.ControllerHasStates.Controller
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<State> States
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(global::Company.MobileDSL.ControllerHasStates.ControllerDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.State.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MobileDSL.State sourceState1 = sourceElement as global::Company.MobileDSL.State;
			if (sourceState1 != null)
			{
				// Create link for path ControllerHasStates.States
				this.States.Add(sourceState1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MobileDSL.State sourceState1 = sourceElement as global::Company.MobileDSL.State;
			if (sourceState1 != null)
			{
				// Delete link for path ControllerHasStates.States
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.ControllerHasStates.GetLinks((global::Company.MobileDSL.Controller)this, sourceState1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.ControllerHasStates.ControllerDomainRoleId, global::Company.MobileDSL.ControllerHasStates.StateDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Comment
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Comment.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Comment.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("407f28da-8152-46e0-84dc-b299c4578399")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x407f28da, 0x8152, 0x46e0, 0x84, 0xdc, 0xb2, 0x99, 0xc4, 0x57, 0x83, 0x99);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x6e548434, 0x483b, 0x48a6, 0xb2, 0x85, 0x94, 0x7b, 0x84, 0x0e, 0x32, 0x3f);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Comment/Text.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Comment/Text.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("6e548434-483b-48a6-b285-947b840e323f")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ComponentModel opposite domain role accessor
		/// <summary>
		/// Gets or sets ComponentModel.
		/// </summary>
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.ComponentModelHasComments.CommentDomainRoleId) as ComponentModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.ComponentModelHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Controller> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(global::Company.MobileDSL.CommentReferencesSubjects.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass State
	/// Description for Company.MobileDSL.State
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c10a167b-d931-4f22-913b-8b5210fdfade")]
	public partial class State : ClassWithPorts
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// State domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc10a167b, 0xd931, 0x4f22, 0x91, 0x3b, 0x8b, 0x52, 0x10, 0xfd, 0xfa, 0xde);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public State(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public State(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Controller opposite domain role accessor
		/// <summary>
		/// Gets or sets Controller.
		/// Description for Company.MobileDSL.ControllerHasStates.State
		/// </summary>
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.ControllerHasStates.StateDomainRoleId) as Controller;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.ControllerHasStates.StateDomainRoleId, value);
			}
		}
		#endregion
		#region ShowForms opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ShowForms.
		/// Description for Company.MobileDSL.StateHasShowForms.State
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ShowForm> ShowForms
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ShowForm>, ShowForm>(global::Company.MobileDSL.StateHasShowForms.StateDomainRoleId);
			}
		}
		#endregion
		#region TargetStated opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetStated.
		/// Description for Company.MobileDSL.StateReferencesTargetStated.SourceState
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<State> TargetStated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(global::Company.MobileDSL.StateReferencesTargetStated.SourceStateDomainRoleId);
			}
		}
		#endregion
		#region SourceStated opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceStated.
		/// Description for Company.MobileDSL.StateReferencesTargetStated.TargetState
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<State> SourceStated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(global::Company.MobileDSL.StateReferencesTargetStated.TargetStateDomainRoleId);
			}
		}
		#endregion
		#region Ps opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Ps.
		/// Description for Company.MobileDSL.StateReferencesPs.State
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<P> Ps
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<P>, P>(global::Company.MobileDSL.StateReferencesPs.StateDomainRoleId);
			}
		}
		#endregion
		#region ConditionBlocked opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ConditionBlocked.
		/// Description for Company.MobileDSL.StateHasConditionBlocked.State
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConditionBlock> ConditionBlocked
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ConditionBlock>, ConditionBlock>(global::Company.MobileDSL.StateHasConditionBlocked.StateDomainRoleId);
			}
		}
		#endregion
		#region ServiceCalled opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ServiceCalled.
		/// Description for Company.MobileDSL.StateHasServiceCalled.State
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ServiceCall> ServiceCalled
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ServiceCall>, ServiceCall>(global::Company.MobileDSL.StateHasServiceCalled.StateDomainRoleId);
			}
		}
		#endregion
		#region AppCoded opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AppCoded.
		/// Description for Company.MobileDSL.StateHasAppCoded.State
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AppCode> AppCoded
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AppCode>, AppCode>(global::Company.MobileDSL.StateHasAppCoded.StateDomainRoleId);
			}
		}
		#endregion
		#region UIDataLinks opposite domain role accessor
		
		/// <summary>
		/// Gets a list of UIDataLinks.
		/// Description for Company.MobileDSL.StateHasUIDataLinks.State
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<UIDLink> UIDataLinks
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<UIDLink>, UIDLink>(global::Company.MobileDSL.StateHasUIDataLinks.StateDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.ShowForm.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.ConditionBlock.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.ServiceCall.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.AppCode.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.UIDLink.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MobileDSL.ShowForm sourceShowForm1 = sourceElement as global::Company.MobileDSL.ShowForm;
			if (sourceShowForm1 != null)
			{
				// Create link for path StateHasShowForms.ShowForms
				this.ShowForms.Add(sourceShowForm1);

				return;
			}
				
			global::Company.MobileDSL.ConditionBlock sourceConditionBlock2 = sourceElement as global::Company.MobileDSL.ConditionBlock;
			if (sourceConditionBlock2 != null)
			{
				// Create link for path StateHasConditionBlocked.ConditionBlocked
				this.ConditionBlocked.Add(sourceConditionBlock2);

				return;
			}
				
			global::Company.MobileDSL.ServiceCall sourceServiceCall3 = sourceElement as global::Company.MobileDSL.ServiceCall;
			if (sourceServiceCall3 != null)
			{
				// Create link for path StateHasServiceCalled.ServiceCalled
				this.ServiceCalled.Add(sourceServiceCall3);

				return;
			}
				
			global::Company.MobileDSL.AppCode sourceAppCode4 = sourceElement as global::Company.MobileDSL.AppCode;
			if (sourceAppCode4 != null)
			{
				// Create link for path StateHasAppCoded.AppCoded
				this.AppCoded.Add(sourceAppCode4);

				return;
			}
				
			global::Company.MobileDSL.UIDLink sourceUIDLink5 = sourceElement as global::Company.MobileDSL.UIDLink;
			if (sourceUIDLink5 != null)
			{
				// Create link for path StateHasUIDataLinks.UIDataLinks
				this.UIDataLinks.Add(sourceUIDLink5);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MobileDSL.ShowForm sourceShowForm1 = sourceElement as global::Company.MobileDSL.ShowForm;
			if (sourceShowForm1 != null)
			{
				// Delete link for path StateHasShowForms.ShowForms
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.StateHasShowForms.GetLinks((global::Company.MobileDSL.State)this, sourceShowForm1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.StateHasShowForms.StateDomainRoleId, global::Company.MobileDSL.StateHasShowForms.ShowFormDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.ConditionBlock sourceConditionBlock2 = sourceElement as global::Company.MobileDSL.ConditionBlock;
			if (sourceConditionBlock2 != null)
			{
				// Delete link for path StateHasConditionBlocked.ConditionBlocked
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.StateHasConditionBlocked.GetLinks((global::Company.MobileDSL.State)this, sourceConditionBlock2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.StateHasConditionBlocked.StateDomainRoleId, global::Company.MobileDSL.StateHasConditionBlocked.ConditionBlockDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.ServiceCall sourceServiceCall3 = sourceElement as global::Company.MobileDSL.ServiceCall;
			if (sourceServiceCall3 != null)
			{
				// Delete link for path StateHasServiceCalled.ServiceCalled
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.StateHasServiceCalled.GetLinks((global::Company.MobileDSL.State)this, sourceServiceCall3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.StateHasServiceCalled.StateDomainRoleId, global::Company.MobileDSL.StateHasServiceCalled.ServiceCallDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.AppCode sourceAppCode4 = sourceElement as global::Company.MobileDSL.AppCode;
			if (sourceAppCode4 != null)
			{
				// Delete link for path StateHasAppCoded.AppCoded
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.StateHasAppCoded.GetLinks((global::Company.MobileDSL.State)this, sourceAppCode4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.StateHasAppCoded.StateDomainRoleId, global::Company.MobileDSL.StateHasAppCoded.AppCodeDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.UIDLink sourceUIDLink5 = sourceElement as global::Company.MobileDSL.UIDLink;
			if (sourceUIDLink5 != null)
			{
				// Delete link for path StateHasUIDataLinks.UIDataLinks
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.StateHasUIDataLinks.GetLinks((global::Company.MobileDSL.State)this, sourceUIDLink5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.StateHasUIDataLinks.StateDomainRoleId, global::Company.MobileDSL.StateHasUIDataLinks.UIDLinkDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass ClassWithPorts
	/// Description for Company.MobileDSL.ClassWithPorts
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ClassWithPorts.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ClassWithPorts.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("16729cd6-c0c9-434a-bb76-365e4d7fbbc5")]
	public abstract partial class ClassWithPorts : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassWithPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x16729cd6, 0xc0c9, 0x434a, 0xbb, 0x76, 0x36, 0x5e, 0x4d, 0x7f, 0xbb, 0xc5);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ClassWithPorts(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IP opposite domain role accessor
		/// <summary>
		/// Gets or sets IP.
		/// Description for Company.MobileDSL.ClassWithPortsHasIP.ClassWithPorts
		/// </summary>
		public virtual IP IP
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.ClassWithPortsHasIP.ClassWithPortsDomainRoleId) as IP;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.ClassWithPortsHasIP.ClassWithPortsDomainRoleId, value);
			}
		}
		#endregion
		#region OP opposite domain role accessor
		/// <summary>
		/// Gets or sets OP.
		/// Description for Company.MobileDSL.ClassWithPortsHasOP.ClassWithPorts
		/// </summary>
		public virtual OP OP
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.ClassWithPortsHasOP.ClassWithPortsDomainRoleId) as OP;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.ClassWithPortsHasOP.ClassWithPortsDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.IP.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: ClassWithPortsHasIP.IP
					if (this.IP != null)
					{
						return false;
					}
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.OP.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: ClassWithPortsHasOP.OP
					if (this.OP != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MobileDSL.IP sourceIP1 = sourceElement as global::Company.MobileDSL.IP;
			if (sourceIP1 != null)
			{
				// Create link for path ClassWithPortsHasIP.IP
				this.IP = sourceIP1;

				return;
			}
				
			global::Company.MobileDSL.OP sourceOP2 = sourceElement as global::Company.MobileDSL.OP;
			if (sourceOP2 != null)
			{
				// Create link for path ClassWithPortsHasOP.OP
				this.OP = sourceOP2;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MobileDSL.IP sourceIP1 = sourceElement as global::Company.MobileDSL.IP;
			if (sourceIP1 != null)
			{
				// Delete link for path ClassWithPortsHasIP.IP
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.ClassWithPortsHasIP.GetLinks((global::Company.MobileDSL.ClassWithPorts)this, sourceIP1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.ClassWithPortsHasIP.ClassWithPortsDomainRoleId, global::Company.MobileDSL.ClassWithPortsHasIP.IPDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.OP sourceOP2 = sourceElement as global::Company.MobileDSL.OP;
			if (sourceOP2 != null)
			{
				// Delete link for path ClassWithPortsHasOP.OP
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.ClassWithPortsHasOP.GetLinks((global::Company.MobileDSL.ClassWithPorts)this, sourceOP2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.ClassWithPortsHasOP.ClassWithPortsDomainRoleId, global::Company.MobileDSL.ClassWithPortsHasOP.OPDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass ShowForm
	/// Description for Company.MobileDSL.ShowForm
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ShowForm.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ShowForm.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("76a7e1be-9811-436f-8303-39f4017eb70b")]
	public partial class ShowForm : Connectable
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ShowForm domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x76a7e1be, 0x9811, 0x436f, 0x83, 0x03, 0x39, 0xf4, 0x01, 0x7e, 0xb7, 0x0b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ShowForm(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ShowForm(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf266cd47, 0x2168, 0x4d9e, 0xbc, 0xac, 0xc5, 0xce, 0x3c, 0x14, 0x83, 0xd9);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MobileDSL.ShowForm.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ShowForm/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ShowForm/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f266cd47-2168-4d9e-bcac-c5ce3c1483d9")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ShowForm.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ShowForm, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ShowForm.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ShowForm.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ShowForm element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ShowForm element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region State opposite domain role accessor
		/// <summary>
		/// Gets or sets State.
		/// Description for Company.MobileDSL.StateHasShowForms.ShowForm
		/// </summary>
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.StateHasShowForms.ShowFormDomainRoleId) as State;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.StateHasShowForms.ShowFormDomainRoleId, value);
			}
		}
		#endregion
		#region Events opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Events.
		/// Description for Company.MobileDSL.ShowFormHasEvents.ShowForm
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Event> Events
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Event>, Event>(global::Company.MobileDSL.ShowFormHasEvents.ShowFormDomainRoleId);
			}
		}
		#endregion
		#region Primitives opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Primitives.
		/// Description for Company.MobileDSL.ShowFormHasPrimitives.ShowForm
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Primitive> Primitives
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Primitive>, Primitive>(global::Company.MobileDSL.ShowFormHasPrimitives.ShowFormDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.Event.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.Primitive.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MobileDSL.Event sourceEvent1 = sourceElement as global::Company.MobileDSL.Event;
			if (sourceEvent1 != null)
			{
				// Create link for path ShowFormHasEvents.Events
				this.Events.Add(sourceEvent1);

				return;
			}
				
			global::Company.MobileDSL.Primitive sourcePrimitive2 = sourceElement as global::Company.MobileDSL.Primitive;
			if (sourcePrimitive2 != null)
			{
				// Create link for path ShowFormHasPrimitives.Primitives
				this.Primitives.Add(sourcePrimitive2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MobileDSL.Event sourceEvent1 = sourceElement as global::Company.MobileDSL.Event;
			if (sourceEvent1 != null)
			{
				// Delete link for path ShowFormHasEvents.Events
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.ShowFormHasEvents.GetLinks((global::Company.MobileDSL.ShowForm)this, sourceEvent1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.ShowFormHasEvents.ShowFormDomainRoleId, global::Company.MobileDSL.ShowFormHasEvents.EventDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.Primitive sourcePrimitive2 = sourceElement as global::Company.MobileDSL.Primitive;
			if (sourcePrimitive2 != null)
			{
				// Delete link for path ShowFormHasPrimitives.Primitives
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.ShowFormHasPrimitives.GetLinks((global::Company.MobileDSL.ShowForm)this, sourcePrimitive2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.ShowFormHasPrimitives.ShowFormDomainRoleId, global::Company.MobileDSL.ShowFormHasPrimitives.PrimitiveDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Event
	/// Description for Company.MobileDSL.Event
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Event.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Event.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2128d4b7-e13d-48f5-9561-10606246a672")]
	public partial class Event : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Event domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2128d4b7, 0xe13d, 0x48f5, 0x95, 0x61, 0x10, 0x60, 0x62, 0x46, 0xa6, 0x72);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Event(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Event(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PrimitiveName domain property code
		
		/// <summary>
		/// PrimitiveName domain property Id.
		/// </summary>
		public static readonly global::System.Guid PrimitiveNameDomainPropertyId = new global::System.Guid(0x04573062, 0xe67a, 0x4c0e, 0xbc, 0xbe, 0xb3, 0x41, 0xf0, 0x20, 0xcd, 0x80);
		
		/// <summary>
		/// Storage for PrimitiveName
		/// </summary>
		private global::System.String primitiveNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of PrimitiveName domain property.
		/// Description for Company.MobileDSL.Event.Primitive Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Event/PrimitiveName.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Event/PrimitiveName.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("04573062-e67a-4c0e-bcbe-b341f020cd80")]
		public global::System.String PrimitiveName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return primitiveNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PrimitiveNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Event.PrimitiveName domain property.
		/// </summary>
		internal sealed partial class PrimitiveNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Event, global::System.String>
		{
			private PrimitiveNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Event.PrimitiveName domain property value handler.
			/// </summary>
			public static readonly PrimitiveNamePropertyHandler Instance = new PrimitiveNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Event.PrimitiveName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PrimitiveNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Event element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.primitiveNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Event element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.primitiveNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xd9cbe32a, 0xca0f, 0x4428, 0xac, 0x5c, 0x9b, 0x4e, 0xeb, 0x68, 0x35, 0x75);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for Company.MobileDSL.Event.Type
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Event/Type.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Event/Type.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d9cbe32a-ca0f-4428-ac5c-9b4eeb683575")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Event.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<Event, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Event.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Event.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Event element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Event element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ShowForm opposite domain role accessor
		/// <summary>
		/// Gets or sets ShowForm.
		/// Description for Company.MobileDSL.ShowFormHasEvents.Event
		/// </summary>
		public virtual ShowForm ShowForm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.ShowFormHasEvents.EventDomainRoleId) as ShowForm;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.ShowFormHasEvents.EventDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Primitive
	/// Description for Company.MobileDSL.Primitive
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Primitive.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Primitive.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b26e8379-0ad9-4800-8dd8-0570ed78c99e")]
	public partial class Primitive : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Primitive domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb26e8379, 0x0ad9, 0x4800, 0x8d, 0xd8, 0x05, 0x70, 0xed, 0x78, 0xc9, 0x9e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Primitive(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Primitive(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Parent domain property code
		
		/// <summary>
		/// Parent domain property Id.
		/// </summary>
		public static readonly global::System.Guid ParentDomainPropertyId = new global::System.Guid(0xd3b39729, 0xf3f9, 0x4030, 0x8e, 0x85, 0x7f, 0xc0, 0x17, 0x2d, 0x81, 0xa9);
		
		/// <summary>
		/// Storage for Parent
		/// </summary>
		private global::System.String parentPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Parent domain property.
		/// Description for Company.MobileDSL.Primitive.Parent
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Primitive/Parent.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Primitive/Parent.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d3b39729-f3f9-4030-8e85-7fc0172d81a9")]
		public global::System.String Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return parentPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ParentPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Primitive.Parent domain property.
		/// </summary>
		internal sealed partial class ParentPropertyHandler : DslModeling::DomainPropertyValueHandler<Primitive, global::System.String>
		{
			private ParentPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Primitive.Parent domain property value handler.
			/// </summary>
			public static readonly ParentPropertyHandler Instance = new ParentPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Primitive.Parent domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ParentDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Primitive element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.parentPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Primitive element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.parentPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ShowForm opposite domain role accessor
		/// <summary>
		/// Gets or sets ShowForm.
		/// Description for Company.MobileDSL.ShowFormHasPrimitives.Primitive
		/// </summary>
		public virtual ShowForm ShowForm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.ShowFormHasPrimitives.PrimitiveDomainRoleId) as ShowForm;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.ShowFormHasPrimitives.PrimitiveDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Button
	/// Description for Company.MobileDSL.Button
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Button.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Button.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2cd5ac2a-a515-4672-a062-bac6b88fce79")]
	public partial class Button : Primitive
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Button domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2cd5ac2a, 0xa515, 0x4672, 0xa0, 0x62, 0xba, 0xc6, 0xb8, 0x8f, 0xce, 0x79);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Button(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Button(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x1c061650, 0xc8c8, 0x4162, 0xb5, 0xf1, 0xa1, 0xb7, 0x9c, 0x55, 0x8d, 0xb8);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MobileDSL.Button.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Button/Text.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Button/Text.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1c061650-c8c8-4162-b5f1-a1b79c558db8")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Button.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Button, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Button.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Button.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Button element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Button element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Connectable
	/// Description for Company.MobileDSL.Connectable
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Connectable.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Connectable.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f1b4bcf4-342c-4add-9ba3-61b04e56d3d8")]
	public abstract partial class Connectable : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Connectable domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf1b4bcf4, 0x342c, 0x4add, 0x9b, 0xa3, 0x61, 0xb0, 0x4e, 0x56, 0xd3, 0xd8);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Connectable(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ChildConnections opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildConnections.
		/// Description for Company.MobileDSL.C.SourceConnectable
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Connectable> ChildConnections
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Connectable>, Connectable>(global::Company.MobileDSL.C.SourceConnectableDomainRoleId);
			}
		}
		#endregion
		#region ParentConnections opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ParentConnections.
		/// Description for Company.MobileDSL.C.TargetConnectable
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Connectable> ParentConnections
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Connectable>, Connectable>(global::Company.MobileDSL.C.TargetConnectableDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass P
	/// Description for Company.MobileDSL.P
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.P.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.P.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("685d0d71-73ac-45b5-9c2c-d4f9fe9ec82a")]
	public abstract partial class P : Connectable
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// P domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x685d0d71, 0x73ac, 0x45b5, 0x9c, 0x2c, 0xd4, 0xf9, 0xfe, 0x9e, 0xc8, 0x2a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected P(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xefeedc42, 0xe06a, 0x43de, 0x8d, 0x62, 0x5a, 0xd0, 0x91, 0xaa, 0x9e, 0x68);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MobileDSL.P.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.P/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.P/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("efeedc42-e06a-43de-8d62-5ad091aa9e68")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the P.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<P, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the P.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the P.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(P element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(P element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Stated opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Stated.
		/// Description for Company.MobileDSL.StateReferencesPs.P
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<State> Stated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(global::Company.MobileDSL.StateReferencesPs.PDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass IP
	/// Description for Company.MobileDSL.IP
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.IP.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.IP.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("73c256cd-6ab2-44b7-9f91-d7913b2944a4")]
	public partial class IP : P
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IP domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x73c256cd, 0x6ab2, 0x44b7, 0x9f, 0x91, 0xd7, 0x91, 0x3b, 0x29, 0x44, 0xa4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IP(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IP(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Parent opposite domain role accessor
		/// <summary>
		/// Gets or sets Parent.
		/// Description for Company.MobileDSL.ClassWithPortsHasIP.IP
		/// </summary>
		public virtual ClassWithPorts Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.ClassWithPortsHasIP.IPDomainRoleId) as ClassWithPorts;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.ClassWithPortsHasIP.IPDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass OP
	/// Description for Company.MobileDSL.OP
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.OP.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.OP.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3c815762-8367-46c1-8840-47ea0a56e01d")]
	public partial class OP : P
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// OP domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3c815762, 0x8367, 0x46c1, 0x88, 0x40, 0x47, 0xea, 0x0a, 0x56, 0xe0, 0x1d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OP(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public OP(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Parent opposite domain role accessor
		/// <summary>
		/// Gets or sets Parent.
		/// Description for Company.MobileDSL.ClassWithPortsHasOP.OP
		/// </summary>
		public virtual ClassWithPorts Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.ClassWithPortsHasOP.OPDomainRoleId) as ClassWithPorts;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.ClassWithPortsHasOP.OPDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass DLink
	/// Description for Company.MobileDSL.DLink
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.DLink.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.DLink.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ce50c746-904b-421f-9442-e45bb29770d0")]
	public partial class DLink : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DLink domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xce50c746, 0x904b, 0x421f, 0x94, 0x42, 0xe4, 0x5b, 0xb2, 0x97, 0x70, 0xd0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DLink(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DLink(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Label
	/// Description for Company.MobileDSL.Label
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Label.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Label.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2b39b25e-3438-47d1-bddb-0baffa09fcfe")]
	public partial class Label : Primitive
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Label domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2b39b25e, 0x3438, 0x47d1, 0xbd, 0xdb, 0x0b, 0xaf, 0xfa, 0x09, 0xfc, 0xfe);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Label(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Label(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x802a9656, 0x97fe, 0x462a, 0x99, 0x5c, 0x2b, 0xf7, 0xe7, 0xb5, 0x6e, 0xae);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MobileDSL.Label.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Label/Text.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Label/Text.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("802a9656-97fe-462a-995c-2bf7e7b56eae")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Label.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Label, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Label.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Label.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Label element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Label element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Color domain property code
		
		/// <summary>
		/// Color domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColorDomainPropertyId = new global::System.Guid(0x85c22353, 0xec1d, 0x4737, 0x94, 0x68, 0x0a, 0x7c, 0x5e, 0x5f, 0xe5, 0xd4);
		
		/// <summary>
		/// Storage for Color
		/// </summary>
		private global::System.String colorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Color domain property.
		/// Description for Company.MobileDSL.Label.Color
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Label/Color.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Label/Color.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("85c22353-ec1d-4737-9468-0a7c5e5fe5d4")]
		public global::System.String Color
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return colorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Label.Color domain property.
		/// </summary>
		internal sealed partial class ColorPropertyHandler : DslModeling::DomainPropertyValueHandler<Label, global::System.String>
		{
			private ColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Label.Color domain property value handler.
			/// </summary>
			public static readonly ColorPropertyHandler Instance = new ColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Label.Color domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Label element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.colorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Label element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.colorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass DropBox
	/// Description for Company.MobileDSL.DropBox
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.DropBox.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.DropBox.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a99f9383-f7ca-41c3-8d17-b9e2c7b69df4")]
	public partial class DropBox : Primitive
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DropBox domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa99f9383, 0xf7ca, 0x41c3, 0x8d, 0x17, 0xb9, 0xe2, 0xc7, 0xb6, 0x9d, 0xf4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DropBox(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DropBox(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Items domain property code
		
		/// <summary>
		/// Items domain property Id.
		/// </summary>
		public static readonly global::System.Guid ItemsDomainPropertyId = new global::System.Guid(0xa2949787, 0xa41c, 0x4dc5, 0xa6, 0x14, 0xa1, 0x11, 0x9f, 0xe8, 0x66, 0xae);
		
		/// <summary>
		/// Storage for Items
		/// </summary>
		private global::System.String itemsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Items domain property.
		/// Description for Company.MobileDSL.DropBox.Items
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.DropBox/Items.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.DropBox/Items.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a2949787-a41c-4dc5-a614-a1119fe866ae")]
		public global::System.String Items
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return itemsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ItemsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DropBox.Items domain property.
		/// </summary>
		internal sealed partial class ItemsPropertyHandler : DslModeling::DomainPropertyValueHandler<DropBox, global::System.String>
		{
			private ItemsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DropBox.Items domain property value handler.
			/// </summary>
			public static readonly ItemsPropertyHandler Instance = new ItemsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DropBox.Items domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ItemsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DropBox element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.itemsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DropBox element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.itemsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass ListBox
	/// Description for Company.MobileDSL.ListBox
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ListBox.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ListBox.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("162f2d84-ddf1-4770-a098-126cca0bdc79")]
	public partial class ListBox : Primitive
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ListBox domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x162f2d84, 0xddf1, 0x4770, 0xa0, 0x98, 0x12, 0x6c, 0xca, 0x0b, 0xdc, 0x79);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ListBox(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ListBox(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Items domain property code
		
		/// <summary>
		/// Items domain property Id.
		/// </summary>
		public static readonly global::System.Guid ItemsDomainPropertyId = new global::System.Guid(0x59cd6859, 0x8705, 0x4449, 0x80, 0x35, 0x89, 0x0a, 0xd4, 0xa3, 0x46, 0xbe);
		
		/// <summary>
		/// Storage for Items
		/// </summary>
		private global::System.String itemsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Items domain property.
		/// Description for Company.MobileDSL.ListBox.Items
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ListBox/Items.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ListBox/Items.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("59cd6859-8705-4449-8035-890ad4a346be")]
		public global::System.String Items
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return itemsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ItemsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ListBox.Items domain property.
		/// </summary>
		internal sealed partial class ItemsPropertyHandler : DslModeling::DomainPropertyValueHandler<ListBox, global::System.String>
		{
			private ItemsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ListBox.Items domain property value handler.
			/// </summary>
			public static readonly ItemsPropertyHandler Instance = new ItemsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ListBox.Items domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ItemsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ListBox element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.itemsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ListBox element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.itemsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass StackPanel
	/// Description for Company.MobileDSL.StackPanel
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.StackPanel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.StackPanel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("456b78d5-ab34-4e27-bad2-154cd4cb0cba")]
	public partial class StackPanel : Primitive
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// StackPanel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x456b78d5, 0xab34, 0x4e27, 0xba, 0xd2, 0x15, 0x4c, 0xd4, 0xcb, 0x0c, 0xba);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StackPanel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StackPanel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Orientation domain property code
		
		/// <summary>
		/// Orientation domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrientationDomainPropertyId = new global::System.Guid(0xada35620, 0x8fa5, 0x4378, 0xa3, 0xa9, 0x7a, 0x48, 0x20, 0x0e, 0xc5, 0x96);
		
		/// <summary>
		/// Storage for Orientation
		/// </summary>
		private global::System.String orientationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Orientation domain property.
		/// Description for Company.MobileDSL.StackPanel.Orientation
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StackPanel/Orientation.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StackPanel/Orientation.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ada35620-8fa5-4378-a3a9-7a48200ec596")]
		public global::System.String Orientation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orientationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrientationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StackPanel.Orientation domain property.
		/// </summary>
		internal sealed partial class OrientationPropertyHandler : DslModeling::DomainPropertyValueHandler<StackPanel, global::System.String>
		{
			private OrientationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StackPanel.Orientation domain property value handler.
			/// </summary>
			public static readonly OrientationPropertyHandler Instance = new OrientationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StackPanel.Orientation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrientationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StackPanel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orientationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StackPanel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orientationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Items domain property code
		
		/// <summary>
		/// Items domain property Id.
		/// </summary>
		public static readonly global::System.Guid ItemsDomainPropertyId = new global::System.Guid(0xcfbc9d7a, 0xb773, 0x46d5, 0x88, 0x03, 0xcf, 0xde, 0x2f, 0xb4, 0x69, 0x44);
		
		/// <summary>
		/// Storage for Items
		/// </summary>
		private global::System.String itemsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Items domain property.
		/// Description for Company.MobileDSL.StackPanel.Items
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StackPanel/Items.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StackPanel/Items.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cfbc9d7a-b773-46d5-8803-cfde2fb46944")]
		public global::System.String Items
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return itemsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ItemsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StackPanel.Items domain property.
		/// </summary>
		internal sealed partial class ItemsPropertyHandler : DslModeling::DomainPropertyValueHandler<StackPanel, global::System.String>
		{
			private ItemsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StackPanel.Items domain property value handler.
			/// </summary>
			public static readonly ItemsPropertyHandler Instance = new ItemsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StackPanel.Items domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ItemsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StackPanel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.itemsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StackPanel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.itemsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Input
	/// Description for Company.MobileDSL.Input
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Input.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Input.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("872613ae-9407-4d6c-966a-9dd050af480c")]
	public partial class Input : Primitive
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Input domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x872613ae, 0x9407, 0x4d6c, 0x96, 0x6a, 0x9d, 0xd0, 0x50, 0xaf, 0x48, 0x0c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Input(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Input(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x554a36b7, 0xb740, 0x45ad, 0xb4, 0x1c, 0xdd, 0xe1, 0xa5, 0x63, 0x95, 0x6e);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MobileDSL.Input.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Input/Text.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Input/Text.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("554a36b7-b740-45ad-b41c-dde1a563956e")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Input.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Input, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Input.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Input.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Input element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Input element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InputMode domain property code
		
		/// <summary>
		/// InputMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid InputModeDomainPropertyId = new global::System.Guid(0x25cb7972, 0xa76c, 0x46d2, 0x8a, 0xd9, 0xd1, 0x0e, 0xc3, 0x76, 0x63, 0xd8);
		
		/// <summary>
		/// Storage for InputMode
		/// </summary>
		private global::System.String inputModePropertyStorage = "Text";
		
		/// <summary>
		/// Gets or sets the value of InputMode domain property.
		/// Description for Company.MobileDSL.Input.Input Mode
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Input/InputMode.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Input/InputMode.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Text")]
		[DslModeling::DomainObjectId("25cb7972-a76c-46d2-8ad9-d10ec37663d8")]
		public global::System.String InputMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return inputModePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InputModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Input.InputMode domain property.
		/// </summary>
		internal sealed partial class InputModePropertyHandler : DslModeling::DomainPropertyValueHandler<Input, global::System.String>
		{
			private InputModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Input.InputMode domain property value handler.
			/// </summary>
			public static readonly InputModePropertyHandler Instance = new InputModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Input.InputMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InputModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Input element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.inputModePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Input element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.inputModePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass ConditionBlock
	/// Description for Company.MobileDSL.ConditionBlock
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ConditionBlock.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ConditionBlock.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("486f6ab7-a708-4e77-a2a5-f06d30cf60b7")]
	public partial class ConditionBlock : Connectable
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConditionBlock domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x486f6ab7, 0xa708, 0x4e77, 0xa2, 0xa5, 0xf0, 0x6d, 0x30, 0xcf, 0x60, 0xb7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConditionBlock(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ConditionBlock(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xbaad2556, 0x78ea, 0x4d73, 0xb8, 0x9b, 0xfe, 0x58, 0x8d, 0x39, 0x22, 0x55);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MobileDSL.ConditionBlock.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ConditionBlock/Text.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ConditionBlock/Text.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("baad2556-78ea-4d73-b89b-fe588d392255")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ConditionBlock.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<ConditionBlock, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ConditionBlock.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ConditionBlock.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ConditionBlock element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ConditionBlock element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region State opposite domain role accessor
		/// <summary>
		/// Gets or sets State.
		/// Description for Company.MobileDSL.StateHasConditionBlocked.ConditionBlock
		/// </summary>
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.StateHasConditionBlocked.ConditionBlockDomainRoleId) as State;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.StateHasConditionBlocked.ConditionBlockDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass ServiceCall
	/// Description for Company.MobileDSL.ServiceCall
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ServiceCall.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ServiceCall.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("39c4fa2a-edef-4f2d-9368-ec0b596dfbc9")]
	public partial class ServiceCall : Connectable
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ServiceCall domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x39c4fa2a, 0xedef, 0x4f2d, 0x93, 0x68, 0xec, 0x0b, 0x59, 0x6d, 0xfb, 0xc9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ServiceCall(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ServiceCall(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ServiceName domain property code
		
		/// <summary>
		/// ServiceName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ServiceNameDomainPropertyId = new global::System.Guid(0xa0cbaa78, 0x6734, 0x4686, 0xa1, 0x9c, 0x4c, 0xc3, 0x6f, 0xdf, 0x8b, 0x9d);
		
		/// <summary>
		/// Storage for ServiceName
		/// </summary>
		private global::System.String serviceNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ServiceName domain property.
		/// Description for Company.MobileDSL.ServiceCall.Service Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ServiceCall/ServiceName.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ServiceCall/ServiceName.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a0cbaa78-6734-4686-a19c-4cc36fdf8b9d")]
		public global::System.String ServiceName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return serviceNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ServiceNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ServiceCall.ServiceName domain property.
		/// </summary>
		internal sealed partial class ServiceNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ServiceCall, global::System.String>
		{
			private ServiceNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ServiceCall.ServiceName domain property value handler.
			/// </summary>
			public static readonly ServiceNamePropertyHandler Instance = new ServiceNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ServiceCall.ServiceName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ServiceNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ServiceCall element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.serviceNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ServiceCall element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.serviceNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ServiceMethod domain property code
		
		/// <summary>
		/// ServiceMethod domain property Id.
		/// </summary>
		public static readonly global::System.Guid ServiceMethodDomainPropertyId = new global::System.Guid(0x0a1278ef, 0x8e49, 0x4082, 0x89, 0xdc, 0x01, 0x16, 0x89, 0xbb, 0xb5, 0xc8);
		
		/// <summary>
		/// Storage for ServiceMethod
		/// </summary>
		private global::System.String serviceMethodPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ServiceMethod domain property.
		/// Description for Company.MobileDSL.ServiceCall.Service Method
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ServiceCall/ServiceMethod.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ServiceCall/ServiceMethod.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0a1278ef-8e49-4082-89dc-011689bbb5c8")]
		public global::System.String ServiceMethod
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return serviceMethodPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ServiceMethodPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ServiceCall.ServiceMethod domain property.
		/// </summary>
		internal sealed partial class ServiceMethodPropertyHandler : DslModeling::DomainPropertyValueHandler<ServiceCall, global::System.String>
		{
			private ServiceMethodPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ServiceCall.ServiceMethod domain property value handler.
			/// </summary>
			public static readonly ServiceMethodPropertyHandler Instance = new ServiceMethodPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ServiceCall.ServiceMethod domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ServiceMethodDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ServiceCall element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.serviceMethodPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ServiceCall element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.serviceMethodPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region State opposite domain role accessor
		/// <summary>
		/// Gets or sets State.
		/// Description for Company.MobileDSL.StateHasServiceCalled.ServiceCall
		/// </summary>
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.StateHasServiceCalled.ServiceCallDomainRoleId) as State;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.StateHasServiceCalled.ServiceCallDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass AppCode
	/// Description for Company.MobileDSL.AppCode
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.AppCode.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.AppCode.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7dc40445-4b7d-4d59-85f8-eba93a590532")]
	public partial class AppCode : Connectable
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AppCode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7dc40445, 0x4b7d, 0x4d59, 0x85, 0xf8, 0xeb, 0xa9, 0x3a, 0x59, 0x05, 0x32);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AppCode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AppCode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x8572ac9b, 0x0687, 0x4c77, 0x88, 0x33, 0x61, 0x17, 0x32, 0x2d, 0x61, 0x2a);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MobileDSL.AppCode.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.AppCode/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.AppCode/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8572ac9b-0687-4c77-8833-6117322d612a")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AppCode.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AppCode, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AppCode.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AppCode.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AppCode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AppCode element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReturnType domain property code
		
		/// <summary>
		/// ReturnType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReturnTypeDomainPropertyId = new global::System.Guid(0x3cb2b0c8, 0x0d79, 0x46c6, 0xbd, 0x2d, 0x60, 0x4f, 0x62, 0xb1, 0x9f, 0x7b);
		
		/// <summary>
		/// Storage for ReturnType
		/// </summary>
		private global::System.String returnTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ReturnType domain property.
		/// Description for Company.MobileDSL.AppCode.Return Type
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.AppCode/ReturnType.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.AppCode/ReturnType.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3cb2b0c8-0d79-46c6-bd2d-604f62b19f7b")]
		public global::System.String ReturnType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return returnTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReturnTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AppCode.ReturnType domain property.
		/// </summary>
		internal sealed partial class ReturnTypePropertyHandler : DslModeling::DomainPropertyValueHandler<AppCode, global::System.String>
		{
			private ReturnTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AppCode.ReturnType domain property value handler.
			/// </summary>
			public static readonly ReturnTypePropertyHandler Instance = new ReturnTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AppCode.ReturnType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReturnTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AppCode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.returnTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AppCode element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.returnTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region State opposite domain role accessor
		/// <summary>
		/// Gets or sets State.
		/// Description for Company.MobileDSL.StateHasAppCoded.AppCode
		/// </summary>
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.StateHasAppCoded.AppCodeDomainRoleId) as State;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.StateHasAppCoded.AppCodeDomainRoleId, value);
			}
		}
		#endregion
		#region StringCodes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of StringCodes.
		/// Description for Company.MobileDSL.AppCodeHasStringCodes.AppCode
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<StringCode> StringCodes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<StringCode>, StringCode>(global::Company.MobileDSL.AppCodeHasStringCodes.AppCodeDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.StringCode.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MobileDSL.StringCode sourceStringCode1 = sourceElement as global::Company.MobileDSL.StringCode;
			if (sourceStringCode1 != null)
			{
				// Create link for path AppCodeHasStringCodes.StringCodes
				this.StringCodes.Add(sourceStringCode1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MobileDSL.StringCode sourceStringCode1 = sourceElement as global::Company.MobileDSL.StringCode;
			if (sourceStringCode1 != null)
			{
				// Delete link for path AppCodeHasStringCodes.StringCodes
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.AppCodeHasStringCodes.GetLinks((global::Company.MobileDSL.AppCode)this, sourceStringCode1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.AppCodeHasStringCodes.AppCodeDomainRoleId, global::Company.MobileDSL.AppCodeHasStringCodes.StringCodeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass StringCode
	/// Description for Company.MobileDSL.StringCode
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.StringCode.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.StringCode.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f3ec95ee-4bda-4281-b2f8-4e1341898512")]
	public partial class StringCode : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// StringCode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf3ec95ee, 0x4bda, 0x4281, 0xb2, 0xf8, 0x4e, 0x13, 0x41, 0x89, 0x85, 0x12);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StringCode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StringCode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xdef80564, 0xde84, 0x4ced, 0x88, 0x46, 0x19, 0xf3, 0xac, 0x25, 0x29, 0xc6);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MobileDSL.StringCode.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StringCode/Text.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StringCode/Text.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("def80564-de84-4ced-8846-19f3ac2529c6")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StringCode.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<StringCode, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StringCode.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StringCode.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StringCode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StringCode element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AppCode opposite domain role accessor
		/// <summary>
		/// Gets or sets AppCode.
		/// Description for Company.MobileDSL.AppCodeHasStringCodes.StringCode
		/// </summary>
		public virtual AppCode AppCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.AppCodeHasStringCodes.StringCodeDomainRoleId) as AppCode;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.AppCodeHasStringCodes.StringCodeDomainRoleId, value);
			}
		}
		#endregion
		#region UIDLink opposite domain role accessor
		/// <summary>
		/// Gets or sets UIDLink.
		/// Description for Company.MobileDSL.UIDLinkHasStringCodes.StringCode
		/// </summary>
		public virtual UIDLink UIDLink
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.UIDLinkHasStringCodes.StringCodeDomainRoleId) as UIDLink;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.UIDLinkHasStringCodes.StringCodeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass UIDLink
	/// Description for Company.MobileDSL.UIDLink
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.UIDLink.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.UIDLink.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("86e993a1-1784-40e1-becc-1fd29557b63a")]
	public partial class UIDLink : Connectable
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UIDLink domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x86e993a1, 0x1784, 0x40e1, 0xbe, 0xcc, 0x1f, 0xd2, 0x95, 0x57, 0xb6, 0x3a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UIDLink(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UIDLink(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region State opposite domain role accessor
		/// <summary>
		/// Gets or sets State.
		/// Description for Company.MobileDSL.StateHasUIDataLinks.UIDLink
		/// </summary>
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.StateHasUIDataLinks.UIDLinkDomainRoleId) as State;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.StateHasUIDataLinks.UIDLinkDomainRoleId, value);
			}
		}
		#endregion
		#region StringCodes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of StringCodes.
		/// Description for Company.MobileDSL.UIDLinkHasStringCodes.UIDLink
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<StringCode> StringCodes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<StringCode>, StringCode>(global::Company.MobileDSL.UIDLinkHasStringCodes.UIDLinkDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.StringCode.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MobileDSL.StringCode sourceStringCode1 = sourceElement as global::Company.MobileDSL.StringCode;
			if (sourceStringCode1 != null)
			{
				// Create link for path UIDLinkHasStringCodes.StringCodes
				this.StringCodes.Add(sourceStringCode1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MobileDSL.StringCode sourceStringCode1 = sourceElement as global::Company.MobileDSL.StringCode;
			if (sourceStringCode1 != null)
			{
				// Delete link for path UIDLinkHasStringCodes.StringCodes
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.UIDLinkHasStringCodes.GetLinks((global::Company.MobileDSL.UIDLink)this, sourceStringCode1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.UIDLinkHasStringCodes.UIDLinkDomainRoleId, global::Company.MobileDSL.UIDLinkHasStringCodes.StringCodeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
