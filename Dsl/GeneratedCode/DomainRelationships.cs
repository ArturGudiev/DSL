//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship Connection
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Connection.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Connection.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("33242001-847f-4706-be82-b1731835df99")]
	public partial class Connection : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Connection domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x33242001, 0x847f, 0x4706, 0xbe, 0x82, 0xb1, 0x73, 0x18, 0x35, 0xdf, 0x99);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Connection link in the same Partition as the given OutPort
		/// </summary>
		/// <param name="source">OutPort to use as the source of the relationship.</param>
		/// <param name="target">InPort to use as the target of the relationship.</param>
		public Connection(OutPort source, InPort target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Connection.SourceDomainRoleId, source), new DslModeling::RoleAssignment(Connection.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Connection(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Connection(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Connection(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Connection(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x0c0a3eaa, 0xe70f, 0x47f3, 0x9b, 0xcd, 0xde, 0xc5, 0x41, 0x2b, 0xc0, 0xb8);
		
		/// <summary>
		/// DomainRole Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Connection/Source.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Connection/Source.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.MobileDSL.Connection/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0c0a3eaa-e70f-47f3-9bcd-dec5412bc0b8")]
		public virtual OutPort Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OutPort)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a InPort
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<OutPort> GetSources(InPort element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<OutPort>, OutPort>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x7261abd1, 0xdfce, 0x4de7, 0xa3, 0xd0, 0xa2, 0xd0, 0x93, 0x13, 0x68, 0x17);
		
		/// <summary>
		/// DomainRole Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Connection/Target.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Connection/Target.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.MobileDSL.Connection/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7261abd1-dfce-4de7-a3d0-a2d093136817")]
		public virtual InPort Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InPort)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a OutPort
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InPort> GetTargets(OutPort element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<InPort>, InPort>(element, SourceDomainRoleId);
		}
		#endregion
		#region SourceRoleName domain property code
		
		/// <summary>
		/// SourceRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceRoleNameDomainPropertyId = new global::System.Guid(0x3a23e914, 0x3b17, 0x470a, 0xb0, 0x0c, 0xf1, 0xd0, 0x0e, 0x19, 0x5e, 0xc4);
		
		/// <summary>
		/// Storage for SourceRoleName
		/// </summary>
		private global::System.String sourceRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceRoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Connection/SourceRoleName.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Connection/SourceRoleName.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("3a23e914-3b17-470a-b00c-f1d00e195ec4")]
		public global::System.String SourceRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Connection.SourceRoleName domain property.
		/// </summary>
		internal sealed partial class SourceRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Connection, global::System.String>
		{
			private SourceRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Connection.SourceRoleName domain property value handler.
			/// </summary>
			public static readonly SourceRoleNamePropertyHandler Instance = new SourceRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Connection.SourceRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Connection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Connection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetRoleName domain property code
		
		/// <summary>
		/// TargetRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetRoleNameDomainPropertyId = new global::System.Guid(0x5df13242, 0x43f0, 0x427b, 0xaf, 0x6d, 0x97, 0x51, 0xb9, 0xdc, 0xd2, 0xf5);
		
		/// <summary>
		/// Storage for TargetRoleName
		/// </summary>
		private global::System.String targetRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetRoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Connection/TargetRoleName.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Connection/TargetRoleName.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("5df13242-43f0-427b-af6d-9751b9dcd2f5")]
		public global::System.String TargetRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Connection.TargetRoleName domain property.
		/// </summary>
		internal sealed partial class TargetRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Connection, global::System.String>
		{
			private TargetRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Connection.TargetRoleName domain property value handler.
			/// </summary>
			public static readonly TargetRoleNamePropertyHandler Instance = new TargetRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Connection.TargetRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Connection element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Connection element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of Connection links to a OutPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.Connection> GetLinksToTargets ( global::Company.MobileDSL.OutPort sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.Connection>(sourceInstance, global::Company.MobileDSL.Connection.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of Connection links to a InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.Connection> GetLinksToSources ( global::Company.MobileDSL.InPort targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.Connection>(targetInstance, global::Company.MobileDSL.Connection.TargetDomainRoleId);
		}
		#endregion
		#region Connection instance accessors
		
		/// <summary>
		/// Get any Connection links between a given OutPort and a InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.Connection> GetLinks( global::Company.MobileDSL.OutPort source, global::Company.MobileDSL.InPort target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.Connection> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.Connection>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.Connection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.Connection>(source, global::Company.MobileDSL.Connection.SourceDomainRoleId);
			foreach ( global::Company.MobileDSL.Connection link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Connection link between a given OutPortand a InPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.Connection GetLink( global::Company.MobileDSL.OutPort source, global::Company.MobileDSL.InPort target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.Connection> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.Connection>(source, global::Company.MobileDSL.Connection.SourceDomainRoleId);
			foreach ( global::Company.MobileDSL.Connection link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ControllerHasPorts
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasPorts.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasPorts.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("cff9aad2-3668-4511-b25e-60455a5e26ad")]
	public partial class ControllerHasPorts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ControllerHasPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcff9aad2, 0x3668, 0x4511, 0xb2, 0x5e, 0x60, 0x45, 0x5a, 0x5e, 0x26, 0xad);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ControllerHasPorts link in the same Partition as the given Controller
		/// </summary>
		/// <param name="source">Controller to use as the source of the relationship.</param>
		/// <param name="target">Port to use as the target of the relationship.</param>
		public ControllerHasPorts(Controller source, Port target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ControllerHasPorts.ControllerDomainRoleId, source), new DslModeling::RoleAssignment(ControllerHasPorts.PortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerHasPorts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerHasPorts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerHasPorts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerHasPorts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0x0aaf0edc, 0x5de1, 0x44b5, 0x98, 0x84, 0x11, 0xdd, 0x71, 0xa5, 0x10, 0xf9);
		
		/// <summary>
		/// DomainRole Controller
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasPorts/Controller.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasPorts/Controller.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ports", PropertyDisplayNameKey="Company.MobileDSL.ControllerHasPorts/Controller.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0aaf0edc-5de1-44b5-9884-11dd71a510f9")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controller of a Port
		/// <summary>
		/// Gets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Controller GetController(Port element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PortDomainRoleId) as Controller;
		}
		
		/// <summary>
		/// Sets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetController(Port element, Controller newController)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PortDomainRoleId, newController);
		}
		#endregion
		#region Port domain role code
		
		/// <summary>
		/// Port domain role Id.
		/// </summary>
		public static readonly global::System.Guid PortDomainRoleId = new global::System.Guid(0x8acbcb67, 0x373d, 0x446f, 0xa5, 0x18, 0x03, 0xd7, 0xa0, 0x84, 0x78, 0x58);
		
		/// <summary>
		/// DomainRole Port
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasPorts/Port.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasPorts/Port.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Controller", PropertyDisplayNameKey="Company.MobileDSL.ControllerHasPorts/Port.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8acbcb67-373d-446f-a518-03d7a0847858")]
		public virtual Port Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, PortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ports of a Controller
		/// <summary>
		/// Gets a list of Ports.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetPorts(Controller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, ControllerDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the list of ControllerHasPorts links to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ControllerHasPorts> GetLinksToPorts ( global::Company.MobileDSL.Controller controllerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasPorts>(controllerInstance, global::Company.MobileDSL.ControllerHasPorts.ControllerDomainRoleId);
		}
		#endregion
		#region Port link accessor
		/// <summary>
		/// Get the ControllerHasPorts link to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ControllerHasPorts GetLinkToController (global::Company.MobileDSL.Port portInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasPorts>(portInstance, global::Company.MobileDSL.ControllerHasPorts.PortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Port not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ControllerHasPorts instance accessors
		
		/// <summary>
		/// Get any ControllerHasPorts links between a given Controller and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ControllerHasPorts> GetLinks( global::Company.MobileDSL.Controller source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ControllerHasPorts> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ControllerHasPorts>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasPorts>(source, global::Company.MobileDSL.ControllerHasPorts.ControllerDomainRoleId);
			foreach ( global::Company.MobileDSL.ControllerHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ControllerHasPorts link between a given Controllerand a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ControllerHasPorts GetLink( global::Company.MobileDSL.Controller source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasPorts>(source, global::Company.MobileDSL.ControllerHasPorts.ControllerDomainRoleId);
			foreach ( global::Company.MobileDSL.ControllerHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ComponentModelHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasComments.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasComments.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f25156b7-0076-4d44-a97e-631de018a1ac")]
	public partial class ComponentModelHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ComponentModelHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf25156b7, 0x0076, 0x4d44, 0xa9, 0x7e, 0x63, 0x1d, 0xe0, 0x18, 0xa1, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ComponentModelHasComments link in the same Partition as the given ComponentModel
		/// </summary>
		/// <param name="source">ComponentModel to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ComponentModelHasComments(ComponentModel source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ComponentModelHasComments.ComponentModelDomainRoleId, source), new DslModeling::RoleAssignment(ComponentModelHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ComponentModel domain role code
		
		/// <summary>
		/// ComponentModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentModelDomainRoleId = new global::System.Guid(0x6facb59d, 0x3e22, 0x4e64, 0x88, 0xd8, 0x19, 0x73, 0xda, 0xe8, 0x87, 0xef);
		
		/// <summary>
		/// DomainRole ComponentModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasComments/ComponentModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasComments/ComponentModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="Company.MobileDSL.ComponentModelHasComments/ComponentModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6facb59d-3e22-4e64-88d8-1973dae887ef")]
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ComponentModel of a Comment
		/// <summary>
		/// Gets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentModel GetComponentModel(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ComponentModel;
		}
		
		/// <summary>
		/// Sets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponentModel(Comment element, ComponentModel newComponentModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newComponentModel);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x3c51f850, 0xe244, 0x4dc1, 0x86, 0x81, 0xd8, 0x43, 0xbd, 0x3f, 0x07, 0x52);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasComments/Comment.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasComments/Comment.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ComponentModel", PropertyDisplayNameKey="Company.MobileDSL.ComponentModelHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3c51f850-e244-4dc1-8681-d843bd3f0752")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ComponentModel
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ComponentModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ComponentModelDomainRoleId);
		}
		#endregion
		#region ComponentModel link accessor
		/// <summary>
		/// Get the list of ComponentModelHasComments links to a ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ComponentModelHasComments> GetLinksToComments ( global::Company.MobileDSL.ComponentModel componentModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasComments>(componentModelInstance, global::Company.MobileDSL.ComponentModelHasComments.ComponentModelDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ComponentModelHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ComponentModelHasComments GetLinkToComponentModel (global::Company.MobileDSL.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasComments>(commentInstance, global::Company.MobileDSL.ComponentModelHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ComponentModelHasComments instance accessors
		
		/// <summary>
		/// Get any ComponentModelHasComments links between a given ComponentModel and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ComponentModelHasComments> GetLinks( global::Company.MobileDSL.ComponentModel source, global::Company.MobileDSL.Comment target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ComponentModelHasComments> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ComponentModelHasComments>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasComments>(source, global::Company.MobileDSL.ComponentModelHasComments.ComponentModelDomainRoleId);
			foreach ( global::Company.MobileDSL.ComponentModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ComponentModelHasComments link between a given ComponentModeland a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ComponentModelHasComments GetLink( global::Company.MobileDSL.ComponentModel source, global::Company.MobileDSL.Comment target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasComments>(source, global::Company.MobileDSL.ComponentModelHasComments.ComponentModelDomainRoleId);
			foreach ( global::Company.MobileDSL.ComponentModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ComponentModelHasControllers
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasControllers.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasControllers.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4ff6ff8e-09a7-4de7-8308-3831ceeae9ef")]
	public partial class ComponentModelHasControllers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ComponentModelHasControllers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ff6ff8e, 0x09a7, 0x4de7, 0x83, 0x08, 0x38, 0x31, 0xce, 0xea, 0xe9, 0xef);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ComponentModelHasControllers link in the same Partition as the given ComponentModel
		/// </summary>
		/// <param name="source">ComponentModel to use as the source of the relationship.</param>
		/// <param name="target">Controller to use as the target of the relationship.</param>
		public ComponentModelHasControllers(ComponentModel source, Controller target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ComponentModelHasControllers.ComponentModelDomainRoleId, source), new DslModeling::RoleAssignment(ComponentModelHasControllers.ControllerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasControllers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasControllers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasControllers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasControllers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ComponentModel domain role code
		
		/// <summary>
		/// ComponentModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentModelDomainRoleId = new global::System.Guid(0x9f8b5981, 0xdf84, 0x46c1, 0xa4, 0x9d, 0x11, 0x95, 0xa2, 0xa7, 0xf3, 0xb7);
		
		/// <summary>
		/// DomainRole ComponentModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasControllers/ComponentModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasControllers/ComponentModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Controllers", PropertyDisplayNameKey="Company.MobileDSL.ComponentModelHasControllers/ComponentModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9f8b5981-df84-46c1-a49d-1195a2a7f3b7")]
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ComponentModel of a Controller
		/// <summary>
		/// Gets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentModel GetComponentModel(Controller element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ControllerDomainRoleId) as ComponentModel;
		}
		
		/// <summary>
		/// Sets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponentModel(Controller element, ComponentModel newComponentModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ControllerDomainRoleId, newComponentModel);
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0x57e38a67, 0x81f4, 0x4b58, 0xa7, 0x85, 0x1f, 0xdd, 0xb9, 0x75, 0x6b, 0x66);
		
		/// <summary>
		/// DomainRole Controller
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasControllers/Controller.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasControllers/Controller.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ComponentModel", PropertyDisplayNameKey="Company.MobileDSL.ComponentModelHasControllers/Controller.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("57e38a67-81f4-4b58-a785-1fddb9756b66")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controllers of a ComponentModel
		/// <summary>
		/// Gets a list of Controllers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Controller> GetControllers(ComponentModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(element, ComponentModelDomainRoleId);
		}
		#endregion
		#region ComponentModel link accessor
		/// <summary>
		/// Get the list of ComponentModelHasControllers links to a ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ComponentModelHasControllers> GetLinksToControllers ( global::Company.MobileDSL.ComponentModel componentModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasControllers>(componentModelInstance, global::Company.MobileDSL.ComponentModelHasControllers.ComponentModelDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the ComponentModelHasControllers link to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ComponentModelHasControllers GetLinkToComponentModel (global::Company.MobileDSL.Controller controllerInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasControllers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasControllers>(controllerInstance, global::Company.MobileDSL.ComponentModelHasControllers.ControllerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Controller not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ComponentModelHasControllers instance accessors
		
		/// <summary>
		/// Get any ComponentModelHasControllers links between a given ComponentModel and a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ComponentModelHasControllers> GetLinks( global::Company.MobileDSL.ComponentModel source, global::Company.MobileDSL.Controller target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ComponentModelHasControllers> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ComponentModelHasControllers>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasControllers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasControllers>(source, global::Company.MobileDSL.ComponentModelHasControllers.ComponentModelDomainRoleId);
			foreach ( global::Company.MobileDSL.ComponentModelHasControllers link in links )
			{
				if ( target.Equals(link.Controller) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ComponentModelHasControllers link between a given ComponentModeland a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ComponentModelHasControllers GetLink( global::Company.MobileDSL.ComponentModel source, global::Company.MobileDSL.Controller target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasControllers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasControllers>(source, global::Company.MobileDSL.ComponentModelHasControllers.ComponentModelDomainRoleId);
			foreach ( global::Company.MobileDSL.ComponentModelHasControllers link in links )
			{
				if ( target.Equals(link.Controller) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.CommentReferencesSubjects.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.CommentReferencesSubjects.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("31e7e1b6-72d5-4b13-817f-bf68bf8e2c33")]
	public partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x31e7e1b6, 0x72d5, 0x4b13, 0x81, 0x7f, 0xbf, 0x68, 0xbf, 0x8e, 0x2c, 0x33);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesSubjects link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">Controller to use as the target of the relationship.</param>
		public CommentReferencesSubjects(Comment source, Controller target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesSubjects.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x72288923, 0xb38e, 0x46ce, 0x92, 0xff, 0x76, 0xac, 0xf9, 0xe6, 0x62, 0x66);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.CommentReferencesSubjects/Comment.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.CommentReferencesSubjects/Comment.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="Company.MobileDSL.CommentReferencesSubjects/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("72288923-b38e-46ce-92ff-76acf9e66266")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a Controller
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(Controller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x60076c03, 0xdea1, 0x466c, 0xa3, 0x1d, 0x43, 0x5a, 0x83, 0xa4, 0x09, 0x40);
		
		/// <summary>
		/// DomainRole Subject
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.CommentReferencesSubjects/Subject.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.CommentReferencesSubjects/Subject.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="Company.MobileDSL.CommentReferencesSubjects/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("60076c03-dea1-466c-a31d-435a83a40940")]
		public virtual Controller Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Controller> GetSubjects(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.CommentReferencesSubjects> GetLinksToSubjects ( global::Company.MobileDSL.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.CommentReferencesSubjects>(commentInstance, global::Company.MobileDSL.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.CommentReferencesSubjects> GetLinksToComments ( global::Company.MobileDSL.Controller subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.CommentReferencesSubjects>(subjectInstance, global::Company.MobileDSL.CommentReferencesSubjects.SubjectDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.CommentReferencesSubjects> GetLinks( global::Company.MobileDSL.Comment source, global::Company.MobileDSL.Controller target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.CommentReferencesSubjects>(source, global::Company.MobileDSL.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Company.MobileDSL.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.CommentReferencesSubjects GetLink( global::Company.MobileDSL.Comment source, global::Company.MobileDSL.Controller target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.CommentReferencesSubjects>(source, global::Company.MobileDSL.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Company.MobileDSL.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ControllerHasStates
	/// Description for Company.MobileDSL.ControllerHasStates
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasStates.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasStates.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("351ce9cd-3d3a-4960-bb72-dbfc3e36b709")]
	public partial class ControllerHasStates : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ControllerHasStates domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x351ce9cd, 0x3d3a, 0x4960, 0xbb, 0x72, 0xdb, 0xfc, 0x3e, 0x36, 0xb7, 0x09);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ControllerHasStates link in the same Partition as the given Controller
		/// </summary>
		/// <param name="source">Controller to use as the source of the relationship.</param>
		/// <param name="target">State_old2 to use as the target of the relationship.</param>
		public ControllerHasStates(Controller source, State_old2 target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ControllerHasStates.ControllerDomainRoleId, source), new DslModeling::RoleAssignment(ControllerHasStates.State_old2DomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerHasStates(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerHasStates(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerHasStates(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerHasStates(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0xb80db3fc, 0x3640, 0x4f59, 0xb4, 0xaf, 0x22, 0xa3, 0x40, 0x6c, 0xf5, 0xc8);
		
		/// <summary>
		/// DomainRole Controller
		/// Description for Company.MobileDSL.ControllerHasStates.Controller
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasStates/Controller.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasStates/Controller.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "States", PropertyDisplayNameKey="Company.MobileDSL.ControllerHasStates/Controller.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b80db3fc-3640-4f59-b4af-22a3406cf5c8")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controller of a State_old2
		/// <summary>
		/// Gets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Controller GetController(State_old2 element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, State_old2DomainRoleId) as Controller;
		}
		
		/// <summary>
		/// Sets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetController(State_old2 element, Controller newController)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, State_old2DomainRoleId, newController);
		}
		#endregion
		#region State_old2 domain role code
		
		/// <summary>
		/// State_old2 domain role Id.
		/// </summary>
		public static readonly global::System.Guid State_old2DomainRoleId = new global::System.Guid(0x57695418, 0x58c6, 0x4d82, 0x82, 0x40, 0x28, 0xa2, 0xb0, 0xdb, 0x23, 0x19);
		
		/// <summary>
		/// DomainRole State_old2
		/// Description for Company.MobileDSL.ControllerHasStates.State_old2
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasStates/State_old2.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasStates/State_old2.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Controller", PropertyDisplayNameKey="Company.MobileDSL.ControllerHasStates/State_old2.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("57695418-58c6-4d82-8240-28a2b0db2319")]
		public virtual State_old2 State_old2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State_old2)DslModeling::DomainRoleInfo.GetRolePlayer(this, State_old2DomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, State_old2DomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access States of a Controller
		/// <summary>
		/// Gets a list of States.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State_old2> GetStates(Controller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State_old2>, State_old2>(element, ControllerDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the list of ControllerHasStates links to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ControllerHasStates> GetLinksToStates ( global::Company.MobileDSL.Controller controllerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasStates>(controllerInstance, global::Company.MobileDSL.ControllerHasStates.ControllerDomainRoleId);
		}
		#endregion
		#region State_old2 link accessor
		/// <summary>
		/// Get the ControllerHasStates link to a State_old2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ControllerHasStates GetLinkToController (global::Company.MobileDSL.State_old2 state_old2Instance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasStates>(state_old2Instance, global::Company.MobileDSL.ControllerHasStates.State_old2DomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of State_old2 not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ControllerHasStates instance accessors
		
		/// <summary>
		/// Get any ControllerHasStates links between a given Controller and a State_old2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ControllerHasStates> GetLinks( global::Company.MobileDSL.Controller source, global::Company.MobileDSL.State_old2 target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ControllerHasStates> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ControllerHasStates>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasStates>(source, global::Company.MobileDSL.ControllerHasStates.ControllerDomainRoleId);
			foreach ( global::Company.MobileDSL.ControllerHasStates link in links )
			{
				if ( target.Equals(link.State_old2) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ControllerHasStates link between a given Controllerand a State_old2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ControllerHasStates GetLink( global::Company.MobileDSL.Controller source, global::Company.MobileDSL.State_old2 target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasStates>(source, global::Company.MobileDSL.ControllerHasStates.ControllerDomainRoleId);
			foreach ( global::Company.MobileDSL.ControllerHasStates link in links )
			{
				if ( target.Equals(link.State_old2) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship State_old2ReferencesPreviousStates
	/// Description for Company.MobileDSL.State_old2ReferencesPreviousStates
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.State_old2ReferencesPreviousStates.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.State_old2ReferencesPreviousStates.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("df7e12a4-758d-4139-88eb-36e4c42867a5")]
	public partial class State_old2ReferencesPreviousStates : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// State_old2ReferencesPreviousStates domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdf7e12a4, 0x758d, 0x4139, 0x88, 0xeb, 0x36, 0xe4, 0xc4, 0x28, 0x67, 0xa5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a State_old2ReferencesPreviousStates link in the same Partition as the given State_old2
		/// </summary>
		/// <param name="source">State_old2 to use as the source of the relationship.</param>
		/// <param name="target">State_old2 to use as the target of the relationship.</param>
		public State_old2ReferencesPreviousStates(State_old2 source, State_old2 target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(State_old2ReferencesPreviousStates.SourceState_old2DomainRoleId, source), new DslModeling::RoleAssignment(State_old2ReferencesPreviousStates.TargetState_old2DomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public State_old2ReferencesPreviousStates(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public State_old2ReferencesPreviousStates(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public State_old2ReferencesPreviousStates(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public State_old2ReferencesPreviousStates(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceState_old2 domain role code
		
		/// <summary>
		/// SourceState_old2 domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceState_old2DomainRoleId = new global::System.Guid(0xd31db177, 0x6cea, 0x481e, 0x93, 0xab, 0xaa, 0xb7, 0xb2, 0xe1, 0x69, 0x98);
		
		/// <summary>
		/// DomainRole SourceState_old2
		/// Description for
		/// Company.MobileDSL.State_old2ReferencesPreviousStates.SourceState_old2
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.State_old2ReferencesPreviousStates/SourceState_old2.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.State_old2ReferencesPreviousStates/SourceState_old2.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PreviousStates", PropertyDisplayNameKey="Company.MobileDSL.State_old2ReferencesPreviousStates/SourceState_old2.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d31db177-6cea-481e-93ab-aab7b2e16998")]
		public virtual State_old2 SourceState_old2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State_old2)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceState_old2DomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceState_old2DomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NextStates of a State_old2
		/// <summary>
		/// Gets a list of NextStates.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State_old2> GetNextStates(State_old2 element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State_old2>, State_old2>(element, TargetState_old2DomainRoleId);
		}
		#endregion
		#region TargetState_old2 domain role code
		
		/// <summary>
		/// TargetState_old2 domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetState_old2DomainRoleId = new global::System.Guid(0x55a0653d, 0xa6cd, 0x4175, 0xad, 0x72, 0xd5, 0xa4, 0x0e, 0x57, 0x29, 0x09);
		
		/// <summary>
		/// DomainRole TargetState_old2
		/// Description for
		/// Company.MobileDSL.State_old2ReferencesPreviousStates.TargetState_old2
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.State_old2ReferencesPreviousStates/TargetState_old2.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.State_old2ReferencesPreviousStates/TargetState_old2.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "NextStates", PropertyDisplayNameKey="Company.MobileDSL.State_old2ReferencesPreviousStates/TargetState_old2.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("55a0653d-a6cd-4175-ad72-d5a40e572909")]
		public virtual State_old2 TargetState_old2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State_old2)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetState_old2DomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetState_old2DomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PreviousStates of a State_old2
		/// <summary>
		/// Gets a list of PreviousStates.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State_old2> GetPreviousStates(State_old2 element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State_old2>, State_old2>(element, SourceState_old2DomainRoleId);
		}
		#endregion
		#region condition domain property code
		
		/// <summary>
		/// condition domain property Id.
		/// </summary>
		public static readonly global::System.Guid conditionDomainPropertyId = new global::System.Guid(0x03f3210a, 0x1bf9, 0x4073, 0x9e, 0x35, 0xdb, 0x8d, 0x2d, 0x4e, 0x21, 0xe0);
		
		/// <summary>
		/// Storage for condition
		/// </summary>
		private global::System.String conditionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of condition domain property.
		/// Description for Company.MobileDSL.State_old2ReferencesPreviousStates.Condition
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.State_old2ReferencesPreviousStates/condition.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.State_old2ReferencesPreviousStates/condition.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("03f3210a-1bf9-4073-9e35-db8d2d4e21e0")]
		public global::System.String condition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return conditionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				conditionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State_old2ReferencesPreviousStates.condition domain property.
		/// </summary>
		internal sealed partial class conditionPropertyHandler : DslModeling::DomainPropertyValueHandler<State_old2ReferencesPreviousStates, global::System.String>
		{
			private conditionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State_old2ReferencesPreviousStates.condition domain property value handler.
			/// </summary>
			public static readonly conditionPropertyHandler Instance = new conditionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State_old2ReferencesPreviousStates.condition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return conditionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State_old2ReferencesPreviousStates element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.conditionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State_old2ReferencesPreviousStates element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.conditionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceState_old2 link accessor
		/// <summary>
		/// Get the list of State_old2ReferencesPreviousStates links to a State_old2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.State_old2ReferencesPreviousStates> GetLinksToPreviousStates ( global::Company.MobileDSL.State_old2 sourceState_old2Instance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.State_old2ReferencesPreviousStates>(sourceState_old2Instance, global::Company.MobileDSL.State_old2ReferencesPreviousStates.SourceState_old2DomainRoleId);
		}
		#endregion
		#region TargetState_old2 link accessor
		/// <summary>
		/// Get the list of State_old2ReferencesPreviousStates links to a State_old2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.State_old2ReferencesPreviousStates> GetLinksToNextStates ( global::Company.MobileDSL.State_old2 targetState_old2Instance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.State_old2ReferencesPreviousStates>(targetState_old2Instance, global::Company.MobileDSL.State_old2ReferencesPreviousStates.TargetState_old2DomainRoleId);
		}
		#endregion
		#region State_old2ReferencesPreviousStates instance accessors
		
		/// <summary>
		/// Get any State_old2ReferencesPreviousStates links between a given State_old2 and a State_old2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.State_old2ReferencesPreviousStates> GetLinks( global::Company.MobileDSL.State_old2 source, global::Company.MobileDSL.State_old2 target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.State_old2ReferencesPreviousStates> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.State_old2ReferencesPreviousStates>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.State_old2ReferencesPreviousStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.State_old2ReferencesPreviousStates>(source, global::Company.MobileDSL.State_old2ReferencesPreviousStates.SourceState_old2DomainRoleId);
			foreach ( global::Company.MobileDSL.State_old2ReferencesPreviousStates link in links )
			{
				if ( target.Equals(link.TargetState_old2) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one State_old2ReferencesPreviousStates link between a given State_old2and a State_old2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.State_old2ReferencesPreviousStates GetLink( global::Company.MobileDSL.State_old2 source, global::Company.MobileDSL.State_old2 target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.State_old2ReferencesPreviousStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.State_old2ReferencesPreviousStates>(source, global::Company.MobileDSL.State_old2ReferencesPreviousStates.SourceState_old2DomainRoleId);
			foreach ( global::Company.MobileDSL.State_old2ReferencesPreviousStates link in links )
			{
				if ( target.Equals(link.TargetState_old2) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship State_old2HasPorts
	/// Description for Company.MobileDSL.State_old2HasPorts
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.State_old2HasPorts.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.State_old2HasPorts.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("06d1a935-c83d-42eb-81b1-e8570d0bdd18")]
	public partial class State_old2HasPorts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// State_old2HasPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x06d1a935, 0xc83d, 0x42eb, 0x81, 0xb1, 0xe8, 0x57, 0x0d, 0x0b, 0xdd, 0x18);
	
				
		/// <summary>
		/// Constructor
		/// Creates a State_old2HasPorts link in the same Partition as the given State_old2
		/// </summary>
		/// <param name="source">State_old2 to use as the source of the relationship.</param>
		/// <param name="target">Port to use as the target of the relationship.</param>
		public State_old2HasPorts(State_old2 source, Port target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(State_old2HasPorts.State_old2DomainRoleId, source), new DslModeling::RoleAssignment(State_old2HasPorts.PortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public State_old2HasPorts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public State_old2HasPorts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public State_old2HasPorts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public State_old2HasPorts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region State_old2 domain role code
		
		/// <summary>
		/// State_old2 domain role Id.
		/// </summary>
		public static readonly global::System.Guid State_old2DomainRoleId = new global::System.Guid(0x309d8570, 0xfd15, 0x4783, 0xb6, 0xb9, 0x5a, 0x86, 0xff, 0x31, 0x28, 0xf9);
		
		/// <summary>
		/// DomainRole State_old2
		/// Description for Company.MobileDSL.State_old2HasPorts.State_old2
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.State_old2HasPorts/State_old2.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.State_old2HasPorts/State_old2.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ports", PropertyDisplayNameKey="Company.MobileDSL.State_old2HasPorts/State_old2.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("309d8570-fd15-4783-b6b9-5a86ff3128f9")]
		public virtual State_old2 State_old2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State_old2)DslModeling::DomainRoleInfo.GetRolePlayer(this, State_old2DomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, State_old2DomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access State_old2 of a Port
		/// <summary>
		/// Gets State_old2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static State_old2 GetState_old2(Port element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PortDomainRoleId) as State_old2;
		}
		
		/// <summary>
		/// Sets State_old2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetState_old2(Port element, State_old2 newState_old2)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PortDomainRoleId, newState_old2);
		}
		#endregion
		#region Port domain role code
		
		/// <summary>
		/// Port domain role Id.
		/// </summary>
		public static readonly global::System.Guid PortDomainRoleId = new global::System.Guid(0x80654f03, 0xea88, 0x44f7, 0x95, 0x4a, 0x41, 0xf3, 0xaa, 0x46, 0x63, 0x4f);
		
		/// <summary>
		/// DomainRole Port
		/// Description for Company.MobileDSL.State_old2HasPorts.Port
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.State_old2HasPorts/Port.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.State_old2HasPorts/Port.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "State_old2", PropertyDisplayNameKey="Company.MobileDSL.State_old2HasPorts/Port.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("80654f03-ea88-44f7-954a-41f3aa46634f")]
		public virtual Port Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, PortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ports of a State_old2
		/// <summary>
		/// Gets a list of Ports.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetPorts(State_old2 element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, State_old2DomainRoleId);
		}
		#endregion
		#region State_old2 link accessor
		/// <summary>
		/// Get the list of State_old2HasPorts links to a State_old2.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.State_old2HasPorts> GetLinksToPorts ( global::Company.MobileDSL.State_old2 state_old2Instance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.State_old2HasPorts>(state_old2Instance, global::Company.MobileDSL.State_old2HasPorts.State_old2DomainRoleId);
		}
		#endregion
		#region Port link accessor
		/// <summary>
		/// Get the State_old2HasPorts link to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.State_old2HasPorts GetLinkToState_old2 (global::Company.MobileDSL.Port portInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.State_old2HasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.State_old2HasPorts>(portInstance, global::Company.MobileDSL.State_old2HasPorts.PortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Port not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region State_old2HasPorts instance accessors
		
		/// <summary>
		/// Get any State_old2HasPorts links between a given State_old2 and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.State_old2HasPorts> GetLinks( global::Company.MobileDSL.State_old2 source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.State_old2HasPorts> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.State_old2HasPorts>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.State_old2HasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.State_old2HasPorts>(source, global::Company.MobileDSL.State_old2HasPorts.State_old2DomainRoleId);
			foreach ( global::Company.MobileDSL.State_old2HasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one State_old2HasPorts link between a given State_old2and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.State_old2HasPorts GetLink( global::Company.MobileDSL.State_old2 source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.State_old2HasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.State_old2HasPorts>(source, global::Company.MobileDSL.State_old2HasPorts.State_old2DomainRoleId);
			foreach ( global::Company.MobileDSL.State_old2HasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ControllerHasStated
	/// Description for Company.MobileDSL.ControllerHasStated
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasStated.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasStated.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("32f7ed14-aa66-453d-8972-2d56f63d126f")]
	public partial class ControllerHasStated : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ControllerHasStated domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x32f7ed14, 0xaa66, 0x453d, 0x89, 0x72, 0x2d, 0x56, 0xf6, 0x3d, 0x12, 0x6f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ControllerHasStated link in the same Partition as the given Controller
		/// </summary>
		/// <param name="source">Controller to use as the source of the relationship.</param>
		/// <param name="target">State to use as the target of the relationship.</param>
		public ControllerHasStated(Controller source, State target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ControllerHasStated.ControllerDomainRoleId, source), new DslModeling::RoleAssignment(ControllerHasStated.StateDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerHasStated(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerHasStated(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerHasStated(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerHasStated(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0xefda5d5a, 0x913f, 0x4371, 0xae, 0xa5, 0xd2, 0x6b, 0x52, 0x82, 0x1d, 0x67);
		
		/// <summary>
		/// DomainRole Controller
		/// Description for Company.MobileDSL.ControllerHasStated.Controller
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasStated/Controller.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasStated/Controller.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Stated", PropertyDisplayNameKey="Company.MobileDSL.ControllerHasStated/Controller.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("efda5d5a-913f-4371-aea5-d26b52821d67")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controller of a State
		/// <summary>
		/// Gets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Controller GetController(State element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StateDomainRoleId) as Controller;
		}
		
		/// <summary>
		/// Sets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetController(State element, Controller newController)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StateDomainRoleId, newController);
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0x21a29bc7, 0xc546, 0x48d9, 0x8b, 0x5a, 0x5f, 0xf2, 0xdc, 0x32, 0x0e, 0x58);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.ControllerHasStated.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasStated/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasStated/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Controller", PropertyDisplayNameKey="Company.MobileDSL.ControllerHasStated/State.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("21a29bc7-c546-48d9-8b5a-5ff2dc320e58")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Stated of a Controller
		/// <summary>
		/// Gets a list of Stated.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State> GetStated(Controller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(element, ControllerDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the list of ControllerHasStated links to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ControllerHasStated> GetLinksToStated ( global::Company.MobileDSL.Controller controllerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasStated>(controllerInstance, global::Company.MobileDSL.ControllerHasStated.ControllerDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the ControllerHasStated link to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ControllerHasStated GetLinkToController (global::Company.MobileDSL.State stateInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasStated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasStated>(stateInstance, global::Company.MobileDSL.ControllerHasStated.StateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of State not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ControllerHasStated instance accessors
		
		/// <summary>
		/// Get any ControllerHasStated links between a given Controller and a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ControllerHasStated> GetLinks( global::Company.MobileDSL.Controller source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ControllerHasStated> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ControllerHasStated>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasStated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasStated>(source, global::Company.MobileDSL.ControllerHasStated.ControllerDomainRoleId);
			foreach ( global::Company.MobileDSL.ControllerHasStated link in links )
			{
				if ( target.Equals(link.State) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ControllerHasStated link between a given Controllerand a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ControllerHasStated GetLink( global::Company.MobileDSL.Controller source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasStated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasStated>(source, global::Company.MobileDSL.ControllerHasStated.ControllerDomainRoleId);
			foreach ( global::Company.MobileDSL.ControllerHasStated link in links )
			{
				if ( target.Equals(link.State) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship StateHasPorts
	/// Description for Company.MobileDSL.StateHasPorts
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasPorts.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.StateHasPorts.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("326eeba9-bce9-4d92-94b6-4aa5d0907244")]
	public partial class StateHasPorts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StateHasPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x326eeba9, 0xbce9, 0x4d92, 0x94, 0xb6, 0x4a, 0xa5, 0xd0, 0x90, 0x72, 0x44);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StateHasPorts link in the same Partition as the given State
		/// </summary>
		/// <param name="source">State to use as the source of the relationship.</param>
		/// <param name="target">Port to use as the target of the relationship.</param>
		public StateHasPorts(State source, Port target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StateHasPorts.StateDomainRoleId, source), new DslModeling::RoleAssignment(StateHasPorts.PortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasPorts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasPorts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasPorts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasPorts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0x93e86296, 0x657c, 0x4417, 0x9c, 0xc6, 0xa4, 0x18, 0xc2, 0xce, 0xda, 0xed);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.StateHasPorts.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasPorts/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateHasPorts/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ports", PropertyDisplayNameKey="Company.MobileDSL.StateHasPorts/State.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("93e86296-657c-4417-9cc6-a418c2cedaed")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access State of a Port
		/// <summary>
		/// Gets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static State GetState(Port element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PortDomainRoleId) as State;
		}
		
		/// <summary>
		/// Sets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetState(Port element, State newState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PortDomainRoleId, newState);
		}
		#endregion
		#region Port domain role code
		
		/// <summary>
		/// Port domain role Id.
		/// </summary>
		public static readonly global::System.Guid PortDomainRoleId = new global::System.Guid(0x27b4f2c0, 0xabb5, 0x49ae, 0xad, 0x32, 0xa5, 0x0d, 0xd9, 0xaa, 0xb0, 0xab);
		
		/// <summary>
		/// DomainRole Port
		/// Description for Company.MobileDSL.StateHasPorts.Port
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasPorts/Port.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateHasPorts/Port.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "State", PropertyDisplayNameKey="Company.MobileDSL.StateHasPorts/Port.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("27b4f2c0-abb5-49ae-ad32-a50dd9aab0ab")]
		public virtual Port Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, PortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ports of a State
		/// <summary>
		/// Gets a list of Ports.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetPorts(State element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, StateDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the list of StateHasPorts links to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateHasPorts> GetLinksToPorts ( global::Company.MobileDSL.State stateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasPorts>(stateInstance, global::Company.MobileDSL.StateHasPorts.StateDomainRoleId);
		}
		#endregion
		#region Port link accessor
		/// <summary>
		/// Get the StateHasPorts link to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateHasPorts GetLinkToState (global::Company.MobileDSL.Port portInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasPorts>(portInstance, global::Company.MobileDSL.StateHasPorts.PortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Port not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region StateHasPorts instance accessors
		
		/// <summary>
		/// Get any StateHasPorts links between a given State and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateHasPorts> GetLinks( global::Company.MobileDSL.State source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.StateHasPorts> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.StateHasPorts>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasPorts>(source, global::Company.MobileDSL.StateHasPorts.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StateHasPorts link between a given Stateand a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateHasPorts GetLink( global::Company.MobileDSL.State source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasPorts>(source, global::Company.MobileDSL.StateHasPorts.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ComponentModelHasTempClassed
	/// Description for Company.MobileDSL.ComponentModelHasTempClassed
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasTempClassed.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasTempClassed.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c31188ac-6836-4424-8b49-a730a70a35fb")]
	public partial class ComponentModelHasTempClassed : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ComponentModelHasTempClassed domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc31188ac, 0x6836, 0x4424, 0x8b, 0x49, 0xa7, 0x30, 0xa7, 0x0a, 0x35, 0xfb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ComponentModelHasTempClassed link in the same Partition as the given ComponentModel
		/// </summary>
		/// <param name="source">ComponentModel to use as the source of the relationship.</param>
		/// <param name="target">TempClass to use as the target of the relationship.</param>
		public ComponentModelHasTempClassed(ComponentModel source, TempClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ComponentModelHasTempClassed.ComponentModelDomainRoleId, source), new DslModeling::RoleAssignment(ComponentModelHasTempClassed.TempClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasTempClassed(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasTempClassed(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasTempClassed(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasTempClassed(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ComponentModel domain role code
		
		/// <summary>
		/// ComponentModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentModelDomainRoleId = new global::System.Guid(0x9bc2d481, 0x2281, 0x450e, 0x89, 0x89, 0x75, 0x81, 0x21, 0x38, 0xd9, 0x30);
		
		/// <summary>
		/// DomainRole ComponentModel
		/// Description for Company.MobileDSL.ComponentModelHasTempClassed.ComponentModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasTempClassed/ComponentModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasTempClassed/ComponentModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TempClassed", PropertyDisplayNameKey="Company.MobileDSL.ComponentModelHasTempClassed/ComponentModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9bc2d481-2281-450e-8989-75812138d930")]
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ComponentModel of a TempClass
		/// <summary>
		/// Gets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentModel GetComponentModel(TempClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TempClassDomainRoleId) as ComponentModel;
		}
		
		/// <summary>
		/// Sets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponentModel(TempClass element, ComponentModel newComponentModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TempClassDomainRoleId, newComponentModel);
		}
		#endregion
		#region TempClass domain role code
		
		/// <summary>
		/// TempClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid TempClassDomainRoleId = new global::System.Guid(0x5852b40e, 0x2248, 0x4ca6, 0xb0, 0x68, 0xb8, 0x45, 0x7a, 0x6f, 0xfb, 0x73);
		
		/// <summary>
		/// DomainRole TempClass
		/// Description for Company.MobileDSL.ComponentModelHasTempClassed.TempClass
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasTempClassed/TempClass.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasTempClassed/TempClass.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ComponentModel", PropertyDisplayNameKey="Company.MobileDSL.ComponentModelHasTempClassed/TempClass.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5852b40e-2248-4ca6-b068-b8457a6ffb73")]
		public virtual TempClass TempClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TempClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, TempClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TempClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TempClassed of a ComponentModel
		/// <summary>
		/// Gets a list of TempClassed.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TempClass> GetTempClassed(ComponentModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TempClass>, TempClass>(element, ComponentModelDomainRoleId);
		}
		#endregion
		#region ComponentModel link accessor
		/// <summary>
		/// Get the list of ComponentModelHasTempClassed links to a ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ComponentModelHasTempClassed> GetLinksToTempClassed ( global::Company.MobileDSL.ComponentModel componentModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasTempClassed>(componentModelInstance, global::Company.MobileDSL.ComponentModelHasTempClassed.ComponentModelDomainRoleId);
		}
		#endregion
		#region TempClass link accessor
		/// <summary>
		/// Get the ComponentModelHasTempClassed link to a TempClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ComponentModelHasTempClassed GetLinkToComponentModel (global::Company.MobileDSL.TempClass tempClassInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasTempClassed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasTempClassed>(tempClassInstance, global::Company.MobileDSL.ComponentModelHasTempClassed.TempClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TempClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ComponentModelHasTempClassed instance accessors
		
		/// <summary>
		/// Get any ComponentModelHasTempClassed links between a given ComponentModel and a TempClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ComponentModelHasTempClassed> GetLinks( global::Company.MobileDSL.ComponentModel source, global::Company.MobileDSL.TempClass target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ComponentModelHasTempClassed> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ComponentModelHasTempClassed>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasTempClassed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasTempClassed>(source, global::Company.MobileDSL.ComponentModelHasTempClassed.ComponentModelDomainRoleId);
			foreach ( global::Company.MobileDSL.ComponentModelHasTempClassed link in links )
			{
				if ( target.Equals(link.TempClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ComponentModelHasTempClassed link between a given ComponentModeland a TempClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ComponentModelHasTempClassed GetLink( global::Company.MobileDSL.ComponentModel source, global::Company.MobileDSL.TempClass target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasTempClassed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasTempClassed>(source, global::Company.MobileDSL.ComponentModelHasTempClassed.ComponentModelDomainRoleId);
			foreach ( global::Company.MobileDSL.ComponentModelHasTempClassed link in links )
			{
				if ( target.Equals(link.TempClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship TempClassHasPorts
	/// Description for Company.MobileDSL.TempClassHasPorts
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.TempClassHasPorts.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.TempClassHasPorts.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5ba86898-81e5-4aff-b591-89da917215f2")]
	public partial class TempClassHasPorts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TempClassHasPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5ba86898, 0x81e5, 0x4aff, 0xb5, 0x91, 0x89, 0xda, 0x91, 0x72, 0x15, 0xf2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TempClassHasPorts link in the same Partition as the given TempClass
		/// </summary>
		/// <param name="source">TempClass to use as the source of the relationship.</param>
		/// <param name="target">Port to use as the target of the relationship.</param>
		public TempClassHasPorts(TempClass source, Port target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TempClassHasPorts.TempClassDomainRoleId, source), new DslModeling::RoleAssignment(TempClassHasPorts.PortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TempClassHasPorts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TempClassHasPorts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TempClassHasPorts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TempClassHasPorts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TempClass domain role code
		
		/// <summary>
		/// TempClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid TempClassDomainRoleId = new global::System.Guid(0x3e38c4a8, 0x7c00, 0x4c66, 0x96, 0x57, 0x04, 0x1c, 0xd7, 0xd2, 0x64, 0x7a);
		
		/// <summary>
		/// DomainRole TempClass
		/// Description for Company.MobileDSL.TempClassHasPorts.TempClass
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.TempClassHasPorts/TempClass.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.TempClassHasPorts/TempClass.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ports", PropertyDisplayNameKey="Company.MobileDSL.TempClassHasPorts/TempClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3e38c4a8-7c00-4c66-9657-041cd7d2647a")]
		public virtual TempClass TempClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TempClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, TempClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TempClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TempClass of a Port
		/// <summary>
		/// Gets TempClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TempClass GetTempClass(Port element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PortDomainRoleId) as TempClass;
		}
		
		/// <summary>
		/// Sets TempClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTempClass(Port element, TempClass newTempClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PortDomainRoleId, newTempClass);
		}
		#endregion
		#region Port domain role code
		
		/// <summary>
		/// Port domain role Id.
		/// </summary>
		public static readonly global::System.Guid PortDomainRoleId = new global::System.Guid(0x4f43fe07, 0x46cf, 0x4a81, 0x90, 0xd0, 0xf1, 0x7c, 0x89, 0x26, 0x8c, 0x00);
		
		/// <summary>
		/// DomainRole Port
		/// Description for Company.MobileDSL.TempClassHasPorts.Port
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.TempClassHasPorts/Port.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.TempClassHasPorts/Port.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TempClass", PropertyDisplayNameKey="Company.MobileDSL.TempClassHasPorts/Port.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4f43fe07-46cf-4a81-90d0-f17c89268c00")]
		public virtual Port Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, PortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ports of a TempClass
		/// <summary>
		/// Gets a list of Ports.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetPorts(TempClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, TempClassDomainRoleId);
		}
		#endregion
		#region TempClass link accessor
		/// <summary>
		/// Get the list of TempClassHasPorts links to a TempClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.TempClassHasPorts> GetLinksToPorts ( global::Company.MobileDSL.TempClass tempClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.TempClassHasPorts>(tempClassInstance, global::Company.MobileDSL.TempClassHasPorts.TempClassDomainRoleId);
		}
		#endregion
		#region Port link accessor
		/// <summary>
		/// Get the TempClassHasPorts link to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.TempClassHasPorts GetLinkToTempClass (global::Company.MobileDSL.Port portInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.TempClassHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.TempClassHasPorts>(portInstance, global::Company.MobileDSL.TempClassHasPorts.PortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Port not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TempClassHasPorts instance accessors
		
		/// <summary>
		/// Get any TempClassHasPorts links between a given TempClass and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.TempClassHasPorts> GetLinks( global::Company.MobileDSL.TempClass source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.TempClassHasPorts> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.TempClassHasPorts>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.TempClassHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.TempClassHasPorts>(source, global::Company.MobileDSL.TempClassHasPorts.TempClassDomainRoleId);
			foreach ( global::Company.MobileDSL.TempClassHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TempClassHasPorts link between a given TempClassand a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.TempClassHasPorts GetLink( global::Company.MobileDSL.TempClass source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.TempClassHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.TempClassHasPorts>(source, global::Company.MobileDSL.TempClassHasPorts.TempClassDomainRoleId);
			foreach ( global::Company.MobileDSL.TempClassHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship TempClassHasStatePorts
	/// Description for Company.MobileDSL.TempClassHasStatePorts
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.TempClassHasStatePorts.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.TempClassHasStatePorts.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("82dd35ca-6b14-4664-b8bb-401fd1a721de")]
	public partial class TempClassHasStatePorts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TempClassHasStatePorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x82dd35ca, 0x6b14, 0x4664, 0xb8, 0xbb, 0x40, 0x1f, 0xd1, 0xa7, 0x21, 0xde);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TempClassHasStatePorts link in the same Partition as the given TempClass
		/// </summary>
		/// <param name="source">TempClass to use as the source of the relationship.</param>
		/// <param name="target">StatePort to use as the target of the relationship.</param>
		public TempClassHasStatePorts(TempClass source, StatePort target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TempClassHasStatePorts.TempClassDomainRoleId, source), new DslModeling::RoleAssignment(TempClassHasStatePorts.StatePortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TempClassHasStatePorts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TempClassHasStatePorts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TempClassHasStatePorts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TempClassHasStatePorts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TempClass domain role code
		
		/// <summary>
		/// TempClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid TempClassDomainRoleId = new global::System.Guid(0x512fa2b6, 0x9920, 0x4916, 0xa8, 0xa4, 0x12, 0x16, 0x66, 0x11, 0x5e, 0x33);
		
		/// <summary>
		/// DomainRole TempClass
		/// Description for Company.MobileDSL.TempClassHasStatePorts.TempClass
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.TempClassHasStatePorts/TempClass.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.TempClassHasStatePorts/TempClass.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "StatePorts", PropertyDisplayNameKey="Company.MobileDSL.TempClassHasStatePorts/TempClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("512fa2b6-9920-4916-a8a4-121666115e33")]
		public virtual TempClass TempClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TempClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, TempClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TempClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TempClass of a StatePort
		/// <summary>
		/// Gets TempClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TempClass GetTempClass(StatePort element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StatePortDomainRoleId) as TempClass;
		}
		
		/// <summary>
		/// Sets TempClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTempClass(StatePort element, TempClass newTempClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StatePortDomainRoleId, newTempClass);
		}
		#endregion
		#region StatePort domain role code
		
		/// <summary>
		/// StatePort domain role Id.
		/// </summary>
		public static readonly global::System.Guid StatePortDomainRoleId = new global::System.Guid(0xd1fe8a83, 0x2fe0, 0x46c6, 0x9e, 0x79, 0x0c, 0x5b, 0x8f, 0x51, 0x1c, 0xfa);
		
		/// <summary>
		/// DomainRole StatePort
		/// Description for Company.MobileDSL.TempClassHasStatePorts.StatePort
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.TempClassHasStatePorts/StatePort.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.TempClassHasStatePorts/StatePort.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TempClass", PropertyDisplayNameKey="Company.MobileDSL.TempClassHasStatePorts/StatePort.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d1fe8a83-2fe0-46c6-9e79-0c5b8f511cfa")]
		public virtual StatePort StatePort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StatePort)DslModeling::DomainRoleInfo.GetRolePlayer(this, StatePortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StatePortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access StatePorts of a TempClass
		/// <summary>
		/// Gets a list of StatePorts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<StatePort> GetStatePorts(TempClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<StatePort>, StatePort>(element, TempClassDomainRoleId);
		}
		#endregion
		#region TempClass link accessor
		/// <summary>
		/// Get the list of TempClassHasStatePorts links to a TempClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.TempClassHasStatePorts> GetLinksToStatePorts ( global::Company.MobileDSL.TempClass tempClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.TempClassHasStatePorts>(tempClassInstance, global::Company.MobileDSL.TempClassHasStatePorts.TempClassDomainRoleId);
		}
		#endregion
		#region StatePort link accessor
		/// <summary>
		/// Get the TempClassHasStatePorts link to a StatePort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.TempClassHasStatePorts GetLinkToTempClass (global::Company.MobileDSL.StatePort statePortInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.TempClassHasStatePorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.TempClassHasStatePorts>(statePortInstance, global::Company.MobileDSL.TempClassHasStatePorts.StatePortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of StatePort not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TempClassHasStatePorts instance accessors
		
		/// <summary>
		/// Get any TempClassHasStatePorts links between a given TempClass and a StatePort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.TempClassHasStatePorts> GetLinks( global::Company.MobileDSL.TempClass source, global::Company.MobileDSL.StatePort target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.TempClassHasStatePorts> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.TempClassHasStatePorts>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.TempClassHasStatePorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.TempClassHasStatePorts>(source, global::Company.MobileDSL.TempClassHasStatePorts.TempClassDomainRoleId);
			foreach ( global::Company.MobileDSL.TempClassHasStatePorts link in links )
			{
				if ( target.Equals(link.StatePort) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TempClassHasStatePorts link between a given TempClassand a StatePort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.TempClassHasStatePorts GetLink( global::Company.MobileDSL.TempClass source, global::Company.MobileDSL.StatePort target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.TempClassHasStatePorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.TempClassHasStatePorts>(source, global::Company.MobileDSL.TempClassHasStatePorts.TempClassDomainRoleId);
			foreach ( global::Company.MobileDSL.TempClassHasStatePorts link in links )
			{
				if ( target.Equals(link.StatePort) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
