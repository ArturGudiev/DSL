//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ComponentModelHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasComments.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasComments.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f25156b7-0076-4d44-a97e-631de018a1ac")]
	public partial class ComponentModelHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ComponentModelHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf25156b7, 0x0076, 0x4d44, 0xa9, 0x7e, 0x63, 0x1d, 0xe0, 0x18, 0xa1, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ComponentModelHasComments link in the same Partition as the given ComponentModel
		/// </summary>
		/// <param name="source">ComponentModel to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ComponentModelHasComments(ComponentModel source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ComponentModelHasComments.ComponentModelDomainRoleId, source), new DslModeling::RoleAssignment(ComponentModelHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ComponentModel domain role code
		
		/// <summary>
		/// ComponentModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentModelDomainRoleId = new global::System.Guid(0x6facb59d, 0x3e22, 0x4e64, 0x88, 0xd8, 0x19, 0x73, 0xda, 0xe8, 0x87, 0xef);
		
		/// <summary>
		/// DomainRole ComponentModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasComments/ComponentModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasComments/ComponentModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="Company.MobileDSL.ComponentModelHasComments/ComponentModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6facb59d-3e22-4e64-88d8-1973dae887ef")]
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ComponentModel of a Comment
		/// <summary>
		/// Gets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentModel GetComponentModel(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ComponentModel;
		}
		
		/// <summary>
		/// Sets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponentModel(Comment element, ComponentModel newComponentModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newComponentModel);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x3c51f850, 0xe244, 0x4dc1, 0x86, 0x81, 0xd8, 0x43, 0xbd, 0x3f, 0x07, 0x52);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasComments/Comment.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasComments/Comment.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ComponentModel", PropertyDisplayNameKey="Company.MobileDSL.ComponentModelHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3c51f850-e244-4dc1-8681-d843bd3f0752")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ComponentModel
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ComponentModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ComponentModelDomainRoleId);
		}
		#endregion
		#region ComponentModel link accessor
		/// <summary>
		/// Get the list of ComponentModelHasComments links to a ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ComponentModelHasComments> GetLinksToComments ( global::Company.MobileDSL.ComponentModel componentModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasComments>(componentModelInstance, global::Company.MobileDSL.ComponentModelHasComments.ComponentModelDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ComponentModelHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ComponentModelHasComments GetLinkToComponentModel (global::Company.MobileDSL.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasComments>(commentInstance, global::Company.MobileDSL.ComponentModelHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ComponentModelHasComments instance accessors
		
		/// <summary>
		/// Get any ComponentModelHasComments links between a given ComponentModel and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ComponentModelHasComments> GetLinks( global::Company.MobileDSL.ComponentModel source, global::Company.MobileDSL.Comment target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ComponentModelHasComments> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ComponentModelHasComments>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasComments>(source, global::Company.MobileDSL.ComponentModelHasComments.ComponentModelDomainRoleId);
			foreach ( global::Company.MobileDSL.ComponentModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ComponentModelHasComments link between a given ComponentModeland a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ComponentModelHasComments GetLink( global::Company.MobileDSL.ComponentModel source, global::Company.MobileDSL.Comment target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasComments>(source, global::Company.MobileDSL.ComponentModelHasComments.ComponentModelDomainRoleId);
			foreach ( global::Company.MobileDSL.ComponentModelHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ComponentModelHasControllers
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasControllers.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasControllers.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4ff6ff8e-09a7-4de7-8308-3831ceeae9ef")]
	public partial class ComponentModelHasControllers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ComponentModelHasControllers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4ff6ff8e, 0x09a7, 0x4de7, 0x83, 0x08, 0x38, 0x31, 0xce, 0xea, 0xe9, 0xef);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ComponentModelHasControllers link in the same Partition as the given ComponentModel
		/// </summary>
		/// <param name="source">ComponentModel to use as the source of the relationship.</param>
		/// <param name="target">Controller to use as the target of the relationship.</param>
		public ComponentModelHasControllers(ComponentModel source, Controller target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ComponentModelHasControllers.ComponentModelDomainRoleId, source), new DslModeling::RoleAssignment(ComponentModelHasControllers.ControllerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasControllers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasControllers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ComponentModelHasControllers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ComponentModelHasControllers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ComponentModel domain role code
		
		/// <summary>
		/// ComponentModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid ComponentModelDomainRoleId = new global::System.Guid(0x9f8b5981, 0xdf84, 0x46c1, 0xa4, 0x9d, 0x11, 0x95, 0xa2, 0xa7, 0xf3, 0xb7);
		
		/// <summary>
		/// DomainRole ComponentModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasControllers/ComponentModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasControllers/ComponentModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Controllers", PropertyDisplayNameKey="Company.MobileDSL.ComponentModelHasControllers/ComponentModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9f8b5981-df84-46c1-a49d-1195a2a7f3b7")]
		public virtual ComponentModel ComponentModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ComponentModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, ComponentModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ComponentModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ComponentModel of a Controller
		/// <summary>
		/// Gets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ComponentModel GetComponentModel(Controller element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ControllerDomainRoleId) as ComponentModel;
		}
		
		/// <summary>
		/// Sets ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetComponentModel(Controller element, ComponentModel newComponentModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ControllerDomainRoleId, newComponentModel);
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0x57e38a67, 0x81f4, 0x4b58, 0xa7, 0x85, 0x1f, 0xdd, 0xb9, 0x75, 0x6b, 0x66);
		
		/// <summary>
		/// DomainRole Controller
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ComponentModelHasControllers/Controller.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ComponentModelHasControllers/Controller.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ComponentModel", PropertyDisplayNameKey="Company.MobileDSL.ComponentModelHasControllers/Controller.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("57e38a67-81f4-4b58-a785-1fddb9756b66")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controllers of a ComponentModel
		/// <summary>
		/// Gets a list of Controllers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Controller> GetControllers(ComponentModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(element, ComponentModelDomainRoleId);
		}
		#endregion
		#region ComponentModel link accessor
		/// <summary>
		/// Get the list of ComponentModelHasControllers links to a ComponentModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ComponentModelHasControllers> GetLinksToControllers ( global::Company.MobileDSL.ComponentModel componentModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasControllers>(componentModelInstance, global::Company.MobileDSL.ComponentModelHasControllers.ComponentModelDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the ComponentModelHasControllers link to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ComponentModelHasControllers GetLinkToComponentModel (global::Company.MobileDSL.Controller controllerInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasControllers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasControllers>(controllerInstance, global::Company.MobileDSL.ComponentModelHasControllers.ControllerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Controller not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ComponentModelHasControllers instance accessors
		
		/// <summary>
		/// Get any ComponentModelHasControllers links between a given ComponentModel and a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ComponentModelHasControllers> GetLinks( global::Company.MobileDSL.ComponentModel source, global::Company.MobileDSL.Controller target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ComponentModelHasControllers> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ComponentModelHasControllers>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasControllers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasControllers>(source, global::Company.MobileDSL.ComponentModelHasControllers.ComponentModelDomainRoleId);
			foreach ( global::Company.MobileDSL.ComponentModelHasControllers link in links )
			{
				if ( target.Equals(link.Controller) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ComponentModelHasControllers link between a given ComponentModeland a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ComponentModelHasControllers GetLink( global::Company.MobileDSL.ComponentModel source, global::Company.MobileDSL.Controller target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ComponentModelHasControllers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ComponentModelHasControllers>(source, global::Company.MobileDSL.ComponentModelHasControllers.ComponentModelDomainRoleId);
			foreach ( global::Company.MobileDSL.ComponentModelHasControllers link in links )
			{
				if ( target.Equals(link.Controller) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.CommentReferencesSubjects.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.CommentReferencesSubjects.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("31e7e1b6-72d5-4b13-817f-bf68bf8e2c33")]
	public partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x31e7e1b6, 0x72d5, 0x4b13, 0x81, 0x7f, 0xbf, 0x68, 0xbf, 0x8e, 0x2c, 0x33);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesSubjects link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">Controller to use as the target of the relationship.</param>
		public CommentReferencesSubjects(Comment source, Controller target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesSubjects.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x72288923, 0xb38e, 0x46ce, 0x92, 0xff, 0x76, 0xac, 0xf9, 0xe6, 0x62, 0x66);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.CommentReferencesSubjects/Comment.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.CommentReferencesSubjects/Comment.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="Company.MobileDSL.CommentReferencesSubjects/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("72288923-b38e-46ce-92ff-76acf9e66266")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a Controller
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(Controller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x60076c03, 0xdea1, 0x466c, 0xa3, 0x1d, 0x43, 0x5a, 0x83, 0xa4, 0x09, 0x40);
		
		/// <summary>
		/// DomainRole Subject
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.CommentReferencesSubjects/Subject.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.CommentReferencesSubjects/Subject.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="Company.MobileDSL.CommentReferencesSubjects/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("60076c03-dea1-466c-a31d-435a83a40940")]
		public virtual Controller Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Controller> GetSubjects(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.CommentReferencesSubjects> GetLinksToSubjects ( global::Company.MobileDSL.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.CommentReferencesSubjects>(commentInstance, global::Company.MobileDSL.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.CommentReferencesSubjects> GetLinksToComments ( global::Company.MobileDSL.Controller subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.CommentReferencesSubjects>(subjectInstance, global::Company.MobileDSL.CommentReferencesSubjects.SubjectDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.CommentReferencesSubjects> GetLinks( global::Company.MobileDSL.Comment source, global::Company.MobileDSL.Controller target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.CommentReferencesSubjects>(source, global::Company.MobileDSL.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Company.MobileDSL.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.CommentReferencesSubjects GetLink( global::Company.MobileDSL.Comment source, global::Company.MobileDSL.Controller target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.CommentReferencesSubjects>(source, global::Company.MobileDSL.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::Company.MobileDSL.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ControllerHasStates
	/// Description for Company.MobileDSL.ControllerHasStates
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasStates.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasStates.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("32f7ed14-aa66-453d-8972-2d56f63d126f")]
	public partial class ControllerHasStates : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ControllerHasStates domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x32f7ed14, 0xaa66, 0x453d, 0x89, 0x72, 0x2d, 0x56, 0xf6, 0x3d, 0x12, 0x6f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ControllerHasStates link in the same Partition as the given Controller
		/// </summary>
		/// <param name="source">Controller to use as the source of the relationship.</param>
		/// <param name="target">State to use as the target of the relationship.</param>
		public ControllerHasStates(Controller source, State target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ControllerHasStates.ControllerDomainRoleId, source), new DslModeling::RoleAssignment(ControllerHasStates.StateDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerHasStates(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerHasStates(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerHasStates(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerHasStates(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0xefda5d5a, 0x913f, 0x4371, 0xae, 0xa5, 0xd2, 0x6b, 0x52, 0x82, 0x1d, 0x67);
		
		/// <summary>
		/// DomainRole Controller
		/// Description for Company.MobileDSL.ControllerHasStates.Controller
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasStates/Controller.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasStates/Controller.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "States", PropertyDisplayNameKey="Company.MobileDSL.ControllerHasStates/Controller.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("efda5d5a-913f-4371-aea5-d26b52821d67")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controller of a State
		/// <summary>
		/// Gets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Controller GetController(State element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StateDomainRoleId) as Controller;
		}
		
		/// <summary>
		/// Sets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetController(State element, Controller newController)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StateDomainRoleId, newController);
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0x21a29bc7, 0xc546, 0x48d9, 0x8b, 0x5a, 0x5f, 0xf2, 0xdc, 0x32, 0x0e, 0x58);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.ControllerHasStates.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasStates/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasStates/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Controller", PropertyDisplayNameKey="Company.MobileDSL.ControllerHasStates/State.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("21a29bc7-c546-48d9-8b5a-5ff2dc320e58")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access States of a Controller
		/// <summary>
		/// Gets a list of States.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State> GetStates(Controller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(element, ControllerDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the list of ControllerHasStates links to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ControllerHasStates> GetLinksToStates ( global::Company.MobileDSL.Controller controllerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasStates>(controllerInstance, global::Company.MobileDSL.ControllerHasStates.ControllerDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the ControllerHasStates link to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ControllerHasStates GetLinkToController (global::Company.MobileDSL.State stateInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasStates>(stateInstance, global::Company.MobileDSL.ControllerHasStates.StateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of State not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ControllerHasStates instance accessors
		
		/// <summary>
		/// Get any ControllerHasStates links between a given Controller and a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ControllerHasStates> GetLinks( global::Company.MobileDSL.Controller source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ControllerHasStates> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ControllerHasStates>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasStates>(source, global::Company.MobileDSL.ControllerHasStates.ControllerDomainRoleId);
			foreach ( global::Company.MobileDSL.ControllerHasStates link in links )
			{
				if ( target.Equals(link.State) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ControllerHasStates link between a given Controllerand a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ControllerHasStates GetLink( global::Company.MobileDSL.Controller source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasStates>(source, global::Company.MobileDSL.ControllerHasStates.ControllerDomainRoleId);
			foreach ( global::Company.MobileDSL.ControllerHasStates link in links )
			{
				if ( target.Equals(link.State) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship StateHasShowForms
	/// Description for Company.MobileDSL.StateHasShowForms
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasShowForms.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.StateHasShowForms.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ef2de89a-c88a-494d-b1c0-b92e77db6ca0")]
	public partial class StateHasShowForms : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StateHasShowForms domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xef2de89a, 0xc88a, 0x494d, 0xb1, 0xc0, 0xb9, 0x2e, 0x77, 0xdb, 0x6c, 0xa0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StateHasShowForms link in the same Partition as the given State
		/// </summary>
		/// <param name="source">State to use as the source of the relationship.</param>
		/// <param name="target">ShowForm to use as the target of the relationship.</param>
		public StateHasShowForms(State source, ShowForm target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StateHasShowForms.StateDomainRoleId, source), new DslModeling::RoleAssignment(StateHasShowForms.ShowFormDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasShowForms(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasShowForms(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasShowForms(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasShowForms(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0xbd269575, 0x5527, 0x42a6, 0xad, 0x5a, 0x46, 0x01, 0x45, 0x64, 0x89, 0xbe);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.StateHasShowForms.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasShowForms/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateHasShowForms/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ShowForms", PropertyDisplayNameKey="Company.MobileDSL.StateHasShowForms/State.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bd269575-5527-42a6-ad5a-4601456489be")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access State of a ShowForm
		/// <summary>
		/// Gets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static State GetState(ShowForm element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ShowFormDomainRoleId) as State;
		}
		
		/// <summary>
		/// Sets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetState(ShowForm element, State newState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ShowFormDomainRoleId, newState);
		}
		#endregion
		#region ShowForm domain role code
		
		/// <summary>
		/// ShowForm domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShowFormDomainRoleId = new global::System.Guid(0xe52f87d9, 0x5d4d, 0x4130, 0x96, 0xb7, 0x44, 0x0a, 0xe0, 0x98, 0xfd, 0x2c);
		
		/// <summary>
		/// DomainRole ShowForm
		/// Description for Company.MobileDSL.StateHasShowForms.ShowForm
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasShowForms/ShowForm.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateHasShowForms/ShowForm.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "State", PropertyDisplayNameKey="Company.MobileDSL.StateHasShowForms/ShowForm.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e52f87d9-5d4d-4130-96b7-440ae098fd2c")]
		public virtual ShowForm ShowForm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShowForm)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShowFormDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShowFormDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShowForms of a State
		/// <summary>
		/// Gets a list of ShowForms.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ShowForm> GetShowForms(State element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ShowForm>, ShowForm>(element, StateDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the list of StateHasShowForms links to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateHasShowForms> GetLinksToShowForms ( global::Company.MobileDSL.State stateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasShowForms>(stateInstance, global::Company.MobileDSL.StateHasShowForms.StateDomainRoleId);
		}
		#endregion
		#region ShowForm link accessor
		/// <summary>
		/// Get the StateHasShowForms link to a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateHasShowForms GetLinkToState (global::Company.MobileDSL.ShowForm showFormInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasShowForms> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasShowForms>(showFormInstance, global::Company.MobileDSL.StateHasShowForms.ShowFormDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ShowForm not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region StateHasShowForms instance accessors
		
		/// <summary>
		/// Get any StateHasShowForms links between a given State and a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateHasShowForms> GetLinks( global::Company.MobileDSL.State source, global::Company.MobileDSL.ShowForm target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.StateHasShowForms> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.StateHasShowForms>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasShowForms> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasShowForms>(source, global::Company.MobileDSL.StateHasShowForms.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateHasShowForms link in links )
			{
				if ( target.Equals(link.ShowForm) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StateHasShowForms link between a given Stateand a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateHasShowForms GetLink( global::Company.MobileDSL.State source, global::Company.MobileDSL.ShowForm target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasShowForms> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasShowForms>(source, global::Company.MobileDSL.StateHasShowForms.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateHasShowForms link in links )
			{
				if ( target.Equals(link.ShowForm) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ShowFormHasEvents
	/// Description for Company.MobileDSL.ShowFormHasEvents
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ShowFormHasEvents.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ShowFormHasEvents.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7e7a78c3-7244-40e4-8915-56627fa52331")]
	public partial class ShowFormHasEvents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ShowFormHasEvents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7e7a78c3, 0x7244, 0x40e4, 0x89, 0x15, 0x56, 0x62, 0x7f, 0xa5, 0x23, 0x31);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ShowFormHasEvents link in the same Partition as the given ShowForm
		/// </summary>
		/// <param name="source">ShowForm to use as the source of the relationship.</param>
		/// <param name="target">Event to use as the target of the relationship.</param>
		public ShowFormHasEvents(ShowForm source, Event target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ShowFormHasEvents.ShowFormDomainRoleId, source), new DslModeling::RoleAssignment(ShowFormHasEvents.EventDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShowFormHasEvents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShowFormHasEvents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShowFormHasEvents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShowFormHasEvents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ShowForm domain role code
		
		/// <summary>
		/// ShowForm domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShowFormDomainRoleId = new global::System.Guid(0xedfd54e4, 0x5e8c, 0x4361, 0x9a, 0x72, 0x41, 0x66, 0x51, 0xa7, 0x33, 0x47);
		
		/// <summary>
		/// DomainRole ShowForm
		/// Description for Company.MobileDSL.ShowFormHasEvents.ShowForm
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ShowFormHasEvents/ShowForm.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ShowFormHasEvents/ShowForm.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Events", PropertyDisplayNameKey="Company.MobileDSL.ShowFormHasEvents/ShowForm.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("edfd54e4-5e8c-4361-9a72-416651a73347")]
		public virtual ShowForm ShowForm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShowForm)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShowFormDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShowFormDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShowForm of a Event
		/// <summary>
		/// Gets ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ShowForm GetShowForm(Event element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EventDomainRoleId) as ShowForm;
		}
		
		/// <summary>
		/// Sets ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetShowForm(Event element, ShowForm newShowForm)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EventDomainRoleId, newShowForm);
		}
		#endregion
		#region Event domain role code
		
		/// <summary>
		/// Event domain role Id.
		/// </summary>
		public static readonly global::System.Guid EventDomainRoleId = new global::System.Guid(0xab92a9f6, 0x1e83, 0x4916, 0x90, 0x8a, 0x6b, 0x17, 0xb1, 0xac, 0xbd, 0x42);
		
		/// <summary>
		/// DomainRole Event
		/// Description for Company.MobileDSL.ShowFormHasEvents.Event
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ShowFormHasEvents/Event.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ShowFormHasEvents/Event.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ShowForm", PropertyDisplayNameKey="Company.MobileDSL.ShowFormHasEvents/Event.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ab92a9f6-1e83-4916-908a-6b17b1acbd42")]
		public virtual Event Event
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Event)DslModeling::DomainRoleInfo.GetRolePlayer(this, EventDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EventDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Events of a ShowForm
		/// <summary>
		/// Gets a list of Events.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Event> GetEvents(ShowForm element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Event>, Event>(element, ShowFormDomainRoleId);
		}
		#endregion
		#region ShowForm link accessor
		/// <summary>
		/// Get the list of ShowFormHasEvents links to a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ShowFormHasEvents> GetLinksToEvents ( global::Company.MobileDSL.ShowForm showFormInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasEvents>(showFormInstance, global::Company.MobileDSL.ShowFormHasEvents.ShowFormDomainRoleId);
		}
		#endregion
		#region Event link accessor
		/// <summary>
		/// Get the ShowFormHasEvents link to a Event.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ShowFormHasEvents GetLinkToShowForm (global::Company.MobileDSL.Event eventInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ShowFormHasEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasEvents>(eventInstance, global::Company.MobileDSL.ShowFormHasEvents.EventDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Event not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ShowFormHasEvents instance accessors
		
		/// <summary>
		/// Get any ShowFormHasEvents links between a given ShowForm and a Event.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ShowFormHasEvents> GetLinks( global::Company.MobileDSL.ShowForm source, global::Company.MobileDSL.Event target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ShowFormHasEvents> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ShowFormHasEvents>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ShowFormHasEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasEvents>(source, global::Company.MobileDSL.ShowFormHasEvents.ShowFormDomainRoleId);
			foreach ( global::Company.MobileDSL.ShowFormHasEvents link in links )
			{
				if ( target.Equals(link.Event) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ShowFormHasEvents link between a given ShowFormand a Event.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ShowFormHasEvents GetLink( global::Company.MobileDSL.ShowForm source, global::Company.MobileDSL.Event target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ShowFormHasEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasEvents>(source, global::Company.MobileDSL.ShowFormHasEvents.ShowFormDomainRoleId);
			foreach ( global::Company.MobileDSL.ShowFormHasEvents link in links )
			{
				if ( target.Equals(link.Event) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ShowFormHasPrimitives
	/// Description for Company.MobileDSL.ShowFormHasPrimitives
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ShowFormHasPrimitives.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ShowFormHasPrimitives.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e19886bd-1044-498e-8ebc-6c82d9a682dc")]
	public partial class ShowFormHasPrimitives : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ShowFormHasPrimitives domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe19886bd, 0x1044, 0x498e, 0x8e, 0xbc, 0x6c, 0x82, 0xd9, 0xa6, 0x82, 0xdc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ShowFormHasPrimitives link in the same Partition as the given ShowForm
		/// </summary>
		/// <param name="source">ShowForm to use as the source of the relationship.</param>
		/// <param name="target">Primitive to use as the target of the relationship.</param>
		public ShowFormHasPrimitives(ShowForm source, Primitive target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ShowFormHasPrimitives.ShowFormDomainRoleId, source), new DslModeling::RoleAssignment(ShowFormHasPrimitives.PrimitiveDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShowFormHasPrimitives(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShowFormHasPrimitives(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShowFormHasPrimitives(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShowFormHasPrimitives(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ShowForm domain role code
		
		/// <summary>
		/// ShowForm domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShowFormDomainRoleId = new global::System.Guid(0xb7b5f667, 0xd913, 0x46cd, 0xb5, 0x9c, 0xf1, 0xdb, 0x31, 0xa4, 0x5a, 0x34);
		
		/// <summary>
		/// DomainRole ShowForm
		/// Description for Company.MobileDSL.ShowFormHasPrimitives.ShowForm
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ShowFormHasPrimitives/ShowForm.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ShowFormHasPrimitives/ShowForm.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Primitives", PropertyDisplayNameKey="Company.MobileDSL.ShowFormHasPrimitives/ShowForm.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b7b5f667-d913-46cd-b59c-f1db31a45a34")]
		public virtual ShowForm ShowForm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShowForm)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShowFormDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShowFormDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShowForm of a Primitive
		/// <summary>
		/// Gets ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ShowForm GetShowForm(Primitive element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PrimitiveDomainRoleId) as ShowForm;
		}
		
		/// <summary>
		/// Sets ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetShowForm(Primitive element, ShowForm newShowForm)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PrimitiveDomainRoleId, newShowForm);
		}
		#endregion
		#region Primitive domain role code
		
		/// <summary>
		/// Primitive domain role Id.
		/// </summary>
		public static readonly global::System.Guid PrimitiveDomainRoleId = new global::System.Guid(0x37569c31, 0xc9ed, 0x4acb, 0xa7, 0x60, 0x2b, 0xa2, 0x1e, 0x6b, 0x99, 0x22);
		
		/// <summary>
		/// DomainRole Primitive
		/// Description for Company.MobileDSL.ShowFormHasPrimitives.Primitive
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ShowFormHasPrimitives/Primitive.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ShowFormHasPrimitives/Primitive.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ShowForm", PropertyDisplayNameKey="Company.MobileDSL.ShowFormHasPrimitives/Primitive.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("37569c31-c9ed-4acb-a760-2ba21e6b9922")]
		public virtual Primitive Primitive
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Primitive)DslModeling::DomainRoleInfo.GetRolePlayer(this, PrimitiveDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PrimitiveDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Primitives of a ShowForm
		/// <summary>
		/// Gets a list of Primitives.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Primitive> GetPrimitives(ShowForm element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Primitive>, Primitive>(element, ShowFormDomainRoleId);
		}
		#endregion
		#region ShowForm link accessor
		/// <summary>
		/// Get the list of ShowFormHasPrimitives links to a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ShowFormHasPrimitives> GetLinksToPrimitives ( global::Company.MobileDSL.ShowForm showFormInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasPrimitives>(showFormInstance, global::Company.MobileDSL.ShowFormHasPrimitives.ShowFormDomainRoleId);
		}
		#endregion
		#region Primitive link accessor
		/// <summary>
		/// Get the ShowFormHasPrimitives link to a Primitive.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ShowFormHasPrimitives GetLinkToShowForm (global::Company.MobileDSL.Primitive primitiveInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ShowFormHasPrimitives> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasPrimitives>(primitiveInstance, global::Company.MobileDSL.ShowFormHasPrimitives.PrimitiveDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Primitive not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ShowFormHasPrimitives instance accessors
		
		/// <summary>
		/// Get any ShowFormHasPrimitives links between a given ShowForm and a Primitive.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ShowFormHasPrimitives> GetLinks( global::Company.MobileDSL.ShowForm source, global::Company.MobileDSL.Primitive target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ShowFormHasPrimitives> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ShowFormHasPrimitives>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ShowFormHasPrimitives> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasPrimitives>(source, global::Company.MobileDSL.ShowFormHasPrimitives.ShowFormDomainRoleId);
			foreach ( global::Company.MobileDSL.ShowFormHasPrimitives link in links )
			{
				if ( target.Equals(link.Primitive) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ShowFormHasPrimitives link between a given ShowFormand a Primitive.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ShowFormHasPrimitives GetLink( global::Company.MobileDSL.ShowForm source, global::Company.MobileDSL.Primitive target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ShowFormHasPrimitives> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasPrimitives>(source, global::Company.MobileDSL.ShowFormHasPrimitives.ShowFormDomainRoleId);
			foreach ( global::Company.MobileDSL.ShowFormHasPrimitives link in links )
			{
				if ( target.Equals(link.Primitive) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship C
	/// Description for Company.MobileDSL.C
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.C.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.C.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("3a5f4dbb-c6dc-4517-84cc-899be56dd27b")]
	public partial class C : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// C domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3a5f4dbb, 0xc6dc, 0x4517, 0x84, 0xcc, 0x89, 0x9b, 0xe5, 0x6d, 0xd2, 0x7b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a C link in the same Partition as the given Connectable
		/// </summary>
		/// <param name="source">Connectable to use as the source of the relationship.</param>
		/// <param name="target">Connectable to use as the target of the relationship.</param>
		public C(Connectable source, Connectable target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(C.SourceConnectableDomainRoleId, source), new DslModeling::RoleAssignment(C.TargetConnectableDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public C(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public C(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public C(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public C(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceConnectable domain role code
		
		/// <summary>
		/// SourceConnectable domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceConnectableDomainRoleId = new global::System.Guid(0x24ae03ea, 0x39bb, 0x4ed1, 0xb1, 0x50, 0x46, 0xe8, 0xa9, 0x41, 0x3e, 0xd6);
		
		/// <summary>
		/// DomainRole SourceConnectable
		/// Description for Company.MobileDSL.C.SourceConnectable
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.C/SourceConnectable.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.C/SourceConnectable.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ChildConnections", PropertyDisplayNameKey="Company.MobileDSL.C/SourceConnectable.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("24ae03ea-39bb-4ed1-b150-46e8a9413ed6")]
		public virtual Connectable SourceConnectable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Connectable)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceConnectableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceConnectableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentConnections of a Connectable
		/// <summary>
		/// Gets a list of ParentConnections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Connectable> GetParentConnections(Connectable element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Connectable>, Connectable>(element, TargetConnectableDomainRoleId);
		}
		#endregion
		#region TargetConnectable domain role code
		
		/// <summary>
		/// TargetConnectable domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetConnectableDomainRoleId = new global::System.Guid(0x70c6bff3, 0xb71b, 0x4c3a, 0x8c, 0xe7, 0xbc, 0x4e, 0x10, 0x9d, 0xa2, 0x3b);
		
		/// <summary>
		/// DomainRole TargetConnectable
		/// Description for Company.MobileDSL.C.TargetConnectable
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.C/TargetConnectable.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.C/TargetConnectable.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentConnections", PropertyDisplayNameKey="Company.MobileDSL.C/TargetConnectable.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("70c6bff3-b71b-4c3a-8ce7-bc4e109da23b")]
		public virtual Connectable TargetConnectable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Connectable)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetConnectableDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetConnectableDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ChildConnections of a Connectable
		/// <summary>
		/// Gets a list of ChildConnections.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Connectable> GetChildConnections(Connectable element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Connectable>, Connectable>(element, SourceConnectableDomainRoleId);
		}
		#endregion
		#region FromEvent domain property code
		
		/// <summary>
		/// FromEvent domain property Id.
		/// </summary>
		public static readonly global::System.Guid FromEventDomainPropertyId = new global::System.Guid(0x05c26bec, 0xc1ce, 0x4c13, 0x90, 0xf9, 0x92, 0xaf, 0x64, 0x78, 0xe3, 0x94);
		
		/// <summary>
		/// Storage for FromEvent
		/// </summary>
		private global::System.String fromEventPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of FromEvent domain property.
		/// Description for Company.MobileDSL.C.From Event
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.C/FromEvent.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.C/FromEvent.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("05c26bec-c1ce-4c13-90f9-92af6478e394")]
		public global::System.String FromEvent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fromEventPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FromEventPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the C.FromEvent domain property.
		/// </summary>
		internal sealed partial class FromEventPropertyHandler : DslModeling::DomainPropertyValueHandler<C, global::System.String>
		{
			private FromEventPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the C.FromEvent domain property value handler.
			/// </summary>
			public static readonly FromEventPropertyHandler Instance = new FromEventPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the C.FromEvent domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FromEventDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(C element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.fromEventPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(C element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fromEventPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NextState domain property code
		
		/// <summary>
		/// NextState domain property Id.
		/// </summary>
		public static readonly global::System.Guid NextStateDomainPropertyId = new global::System.Guid(0xfbc21502, 0xb9bc, 0x454b, 0x85, 0x40, 0xec, 0xc2, 0x72, 0x89, 0x24, 0xdb);
		
		/// <summary>
		/// Storage for NextState
		/// </summary>
		private global::System.String nextStatePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of NextState domain property.
		/// Description for Company.MobileDSL.C.Next State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.C/NextState.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.C/NextState.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fbc21502-b9bc-454b-8540-ecc2728924db")]
		public global::System.String NextState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nextStatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NextStatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the C.NextState domain property.
		/// </summary>
		internal sealed partial class NextStatePropertyHandler : DslModeling::DomainPropertyValueHandler<C, global::System.String>
		{
			private NextStatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the C.NextState domain property value handler.
			/// </summary>
			public static readonly NextStatePropertyHandler Instance = new NextStatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the C.NextState domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NextStateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(C element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nextStatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(C element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nextStatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Data domain property code
		
		/// <summary>
		/// Data domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataDomainPropertyId = new global::System.Guid(0x48fc92a5, 0xce5b, 0x4324, 0xa6, 0x75, 0xf6, 0xc1, 0x71, 0x6e, 0x34, 0x21);
		
		/// <summary>
		/// Storage for Data
		/// </summary>
		private global::System.String dataPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Data domain property.
		/// Description for Company.MobileDSL.C.Data
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.C/Data.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.C/Data.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("48fc92a5-ce5b-4324-a675-f6c1716e3421")]
		public global::System.String Data
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the C.Data domain property.
		/// </summary>
		internal sealed partial class DataPropertyHandler : DslModeling::DomainPropertyValueHandler<C, global::System.String>
		{
			private DataPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the C.Data domain property value handler.
			/// </summary>
			public static readonly DataPropertyHandler Instance = new DataPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the C.Data domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(C element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(C element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NextController domain property code
		
		/// <summary>
		/// NextController domain property Id.
		/// </summary>
		public static readonly global::System.Guid NextControllerDomainPropertyId = new global::System.Guid(0xd30db48b, 0x9edb, 0x466d, 0xa2, 0xdd, 0x2b, 0x27, 0x8c, 0xa5, 0x01, 0x7c);
		
		/// <summary>
		/// Storage for NextController
		/// </summary>
		private global::System.String nextControllerPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of NextController domain property.
		/// Description for Company.MobileDSL.C.Next Controller
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.C/NextController.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.C/NextController.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d30db48b-9edb-466d-a2dd-2b278ca5017c")]
		public global::System.String NextController
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nextControllerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NextControllerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the C.NextController domain property.
		/// </summary>
		internal sealed partial class NextControllerPropertyHandler : DslModeling::DomainPropertyValueHandler<C, global::System.String>
		{
			private NextControllerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the C.NextController domain property value handler.
			/// </summary>
			public static readonly NextControllerPropertyHandler Instance = new NextControllerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the C.NextController domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NextControllerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(C element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nextControllerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(C element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nextControllerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Case domain property code
		
		/// <summary>
		/// Case domain property Id.
		/// </summary>
		public static readonly global::System.Guid CaseDomainPropertyId = new global::System.Guid(0xe1d60fa2, 0x7275, 0x4168, 0x92, 0xff, 0x02, 0xeb, 0x35, 0x37, 0xd6, 0xb0);
		
		/// <summary>
		/// Storage for Case
		/// </summary>
		private global::System.String casePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Case domain property.
		/// Description for Company.MobileDSL.C.Case
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.C/Case.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.C/Case.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e1d60fa2-7275-4168-92ff-02eb3537d6b0")]
		public global::System.String Case
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return casePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CasePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the C.Case domain property.
		/// </summary>
		internal sealed partial class CasePropertyHandler : DslModeling::DomainPropertyValueHandler<C, global::System.String>
		{
			private CasePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the C.Case domain property value handler.
			/// </summary>
			public static readonly CasePropertyHandler Instance = new CasePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the C.Case domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CaseDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(C element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.casePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(C element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.casePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceConnectable link accessor
		/// <summary>
		/// Get the list of C links to a Connectable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.C> GetLinksToChildConnections ( global::Company.MobileDSL.Connectable sourceConnectableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.C>(sourceConnectableInstance, global::Company.MobileDSL.C.SourceConnectableDomainRoleId);
		}
		#endregion
		#region TargetConnectable link accessor
		/// <summary>
		/// Get the list of C links to a Connectable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.C> GetLinksToParentConnections ( global::Company.MobileDSL.Connectable targetConnectableInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.C>(targetConnectableInstance, global::Company.MobileDSL.C.TargetConnectableDomainRoleId);
		}
		#endregion
		#region C instance accessors
		
		/// <summary>
		/// Get any C links between a given Connectable and a Connectable.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.C> GetLinks( global::Company.MobileDSL.Connectable source, global::Company.MobileDSL.Connectable target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.C> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.C>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.C> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.C>(source, global::Company.MobileDSL.C.SourceConnectableDomainRoleId);
			foreach ( global::Company.MobileDSL.C link in links )
			{
				if ( target.Equals(link.TargetConnectable) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ClassWithPortsHasIP
	/// Description for Company.MobileDSL.ClassWithPortsHasIP
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ClassWithPortsHasIP.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ClassWithPortsHasIP.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3626f7b0-8334-44a7-80b2-94cde3d8bc8a")]
	public partial class ClassWithPortsHasIP : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassWithPortsHasIP domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3626f7b0, 0x8334, 0x44a7, 0x80, 0xb2, 0x94, 0xcd, 0xe3, 0xd8, 0xbc, 0x8a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassWithPortsHasIP link in the same Partition as the given ClassWithPorts
		/// </summary>
		/// <param name="source">ClassWithPorts to use as the source of the relationship.</param>
		/// <param name="target">IP to use as the target of the relationship.</param>
		public ClassWithPortsHasIP(ClassWithPorts source, IP target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassWithPortsHasIP.ClassWithPortsDomainRoleId, source), new DslModeling::RoleAssignment(ClassWithPortsHasIP.IPDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassWithPortsHasIP(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassWithPortsHasIP(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassWithPortsHasIP(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassWithPortsHasIP(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ClassWithPorts domain role code
		
		/// <summary>
		/// ClassWithPorts domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassWithPortsDomainRoleId = new global::System.Guid(0xf96088ba, 0xff45, 0x4e1c, 0x80, 0x55, 0x74, 0x19, 0x43, 0x0f, 0x4c, 0x66);
		
		/// <summary>
		/// DomainRole ClassWithPorts
		/// Description for Company.MobileDSL.ClassWithPortsHasIP.ClassWithPorts
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ClassWithPortsHasIP/ClassWithPorts.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ClassWithPortsHasIP/ClassWithPorts.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IP", PropertyDisplayNameKey="Company.MobileDSL.ClassWithPortsHasIP/ClassWithPorts.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f96088ba-ff45-4e1c-8055-7419430f4c66")]
		public virtual ClassWithPorts ClassWithPorts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClassWithPorts)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassWithPortsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassWithPortsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a IP
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ClassWithPorts GetParent(IP element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IPDomainRoleId) as ClassWithPorts;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(IP element, ClassWithPorts newClassWithPorts)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IPDomainRoleId, newClassWithPorts);
		}
		#endregion
		#region IP domain role code
		
		/// <summary>
		/// IP domain role Id.
		/// </summary>
		public static readonly global::System.Guid IPDomainRoleId = new global::System.Guid(0x4702e8ba, 0xe740, 0x4b54, 0x8e, 0x82, 0xa0, 0x90, 0x23, 0xbd, 0x61, 0x11);
		
		/// <summary>
		/// DomainRole IP
		/// Description for Company.MobileDSL.ClassWithPortsHasIP.IP
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ClassWithPortsHasIP/IP.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ClassWithPortsHasIP/IP.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="Company.MobileDSL.ClassWithPortsHasIP/IP.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4702e8ba-e740-4b54-8e82-a09023bd6111")]
		public virtual IP IP
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IP)DslModeling::DomainRoleInfo.GetRolePlayer(this, IPDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IPDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IP of a ClassWithPorts
		/// <summary>
		/// Gets IP.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IP GetIP(ClassWithPorts element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClassWithPortsDomainRoleId) as IP;
		}
		
		/// <summary>
		/// Sets IP.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIP(ClassWithPorts element, IP newIP)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClassWithPortsDomainRoleId, newIP);
		}
		#endregion
		#region ClassWithPorts link accessor
		/// <summary>
		/// Get the ClassWithPortsHasIP link to a ClassWithPorts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ClassWithPortsHasIP GetLinkToIP (global::Company.MobileDSL.ClassWithPorts classWithPortsInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ClassWithPortsHasIP> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ClassWithPortsHasIP>(classWithPortsInstance, global::Company.MobileDSL.ClassWithPortsHasIP.ClassWithPortsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ClassWithPorts not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IP link accessor
		/// <summary>
		/// Get the ClassWithPortsHasIP link to a IP.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ClassWithPortsHasIP GetLinkToParent (global::Company.MobileDSL.IP iPInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ClassWithPortsHasIP> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ClassWithPortsHasIP>(iPInstance, global::Company.MobileDSL.ClassWithPortsHasIP.IPDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IP not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassWithPortsHasIP instance accessors
		
		/// <summary>
		/// Get any ClassWithPortsHasIP links between a given ClassWithPorts and a IP.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ClassWithPortsHasIP> GetLinks( global::Company.MobileDSL.ClassWithPorts source, global::Company.MobileDSL.IP target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ClassWithPortsHasIP> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ClassWithPortsHasIP>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ClassWithPortsHasIP> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ClassWithPortsHasIP>(source, global::Company.MobileDSL.ClassWithPortsHasIP.ClassWithPortsDomainRoleId);
			foreach ( global::Company.MobileDSL.ClassWithPortsHasIP link in links )
			{
				if ( target.Equals(link.IP) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassWithPortsHasIP link between a given ClassWithPortsand a IP.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ClassWithPortsHasIP GetLink( global::Company.MobileDSL.ClassWithPorts source, global::Company.MobileDSL.IP target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ClassWithPortsHasIP> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ClassWithPortsHasIP>(source, global::Company.MobileDSL.ClassWithPortsHasIP.ClassWithPortsDomainRoleId);
			foreach ( global::Company.MobileDSL.ClassWithPortsHasIP link in links )
			{
				if ( target.Equals(link.IP) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ClassWithPortsHasOP
	/// Description for Company.MobileDSL.ClassWithPortsHasOP
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ClassWithPortsHasOP.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ClassWithPortsHasOP.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("72965b1b-c4ff-4c97-aca3-85eb974d3128")]
	public partial class ClassWithPortsHasOP : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassWithPortsHasOP domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x72965b1b, 0xc4ff, 0x4c97, 0xac, 0xa3, 0x85, 0xeb, 0x97, 0x4d, 0x31, 0x28);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassWithPortsHasOP link in the same Partition as the given ClassWithPorts
		/// </summary>
		/// <param name="source">ClassWithPorts to use as the source of the relationship.</param>
		/// <param name="target">OP to use as the target of the relationship.</param>
		public ClassWithPortsHasOP(ClassWithPorts source, OP target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassWithPortsHasOP.ClassWithPortsDomainRoleId, source), new DslModeling::RoleAssignment(ClassWithPortsHasOP.OPDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassWithPortsHasOP(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassWithPortsHasOP(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassWithPortsHasOP(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassWithPortsHasOP(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ClassWithPorts domain role code
		
		/// <summary>
		/// ClassWithPorts domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassWithPortsDomainRoleId = new global::System.Guid(0xd7e90e04, 0x0c45, 0x480d, 0xac, 0x02, 0x3a, 0xdc, 0x60, 0x4e, 0xaf, 0xc0);
		
		/// <summary>
		/// DomainRole ClassWithPorts
		/// Description for Company.MobileDSL.ClassWithPortsHasOP.ClassWithPorts
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ClassWithPortsHasOP/ClassWithPorts.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ClassWithPortsHasOP/ClassWithPorts.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "OP", PropertyDisplayNameKey="Company.MobileDSL.ClassWithPortsHasOP/ClassWithPorts.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d7e90e04-0c45-480d-ac02-3adc604eafc0")]
		public virtual ClassWithPorts ClassWithPorts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClassWithPorts)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassWithPortsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassWithPortsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parent of a OP
		/// <summary>
		/// Gets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ClassWithPorts GetParent(OP element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OPDomainRoleId) as ClassWithPorts;
		}
		
		/// <summary>
		/// Sets Parent.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParent(OP element, ClassWithPorts newClassWithPorts)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OPDomainRoleId, newClassWithPorts);
		}
		#endregion
		#region OP domain role code
		
		/// <summary>
		/// OP domain role Id.
		/// </summary>
		public static readonly global::System.Guid OPDomainRoleId = new global::System.Guid(0xd22da28f, 0xd0ba, 0x416e, 0xaf, 0xa6, 0xfd, 0xa3, 0x52, 0x73, 0xb3, 0xe6);
		
		/// <summary>
		/// DomainRole OP
		/// Description for Company.MobileDSL.ClassWithPortsHasOP.OP
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ClassWithPortsHasOP/OP.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ClassWithPortsHasOP/OP.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parent", PropertyDisplayNameKey="Company.MobileDSL.ClassWithPortsHasOP/OP.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d22da28f-d0ba-416e-afa6-fda35273b3e6")]
		public virtual OP OP
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (OP)DslModeling::DomainRoleInfo.GetRolePlayer(this, OPDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OPDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OP of a ClassWithPorts
		/// <summary>
		/// Gets OP.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static OP GetOP(ClassWithPorts element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClassWithPortsDomainRoleId) as OP;
		}
		
		/// <summary>
		/// Sets OP.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOP(ClassWithPorts element, OP newOP)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClassWithPortsDomainRoleId, newOP);
		}
		#endregion
		#region ClassWithPorts link accessor
		/// <summary>
		/// Get the ClassWithPortsHasOP link to a ClassWithPorts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ClassWithPortsHasOP GetLinkToOP (global::Company.MobileDSL.ClassWithPorts classWithPortsInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ClassWithPortsHasOP> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ClassWithPortsHasOP>(classWithPortsInstance, global::Company.MobileDSL.ClassWithPortsHasOP.ClassWithPortsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ClassWithPorts not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OP link accessor
		/// <summary>
		/// Get the ClassWithPortsHasOP link to a OP.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ClassWithPortsHasOP GetLinkToParent (global::Company.MobileDSL.OP oPInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ClassWithPortsHasOP> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ClassWithPortsHasOP>(oPInstance, global::Company.MobileDSL.ClassWithPortsHasOP.OPDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of OP not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassWithPortsHasOP instance accessors
		
		/// <summary>
		/// Get any ClassWithPortsHasOP links between a given ClassWithPorts and a OP.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ClassWithPortsHasOP> GetLinks( global::Company.MobileDSL.ClassWithPorts source, global::Company.MobileDSL.OP target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ClassWithPortsHasOP> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ClassWithPortsHasOP>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ClassWithPortsHasOP> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ClassWithPortsHasOP>(source, global::Company.MobileDSL.ClassWithPortsHasOP.ClassWithPortsDomainRoleId);
			foreach ( global::Company.MobileDSL.ClassWithPortsHasOP link in links )
			{
				if ( target.Equals(link.OP) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassWithPortsHasOP link between a given ClassWithPortsand a OP.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ClassWithPortsHasOP GetLink( global::Company.MobileDSL.ClassWithPorts source, global::Company.MobileDSL.OP target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ClassWithPortsHasOP> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ClassWithPortsHasOP>(source, global::Company.MobileDSL.ClassWithPortsHasOP.ClassWithPortsDomainRoleId);
			foreach ( global::Company.MobileDSL.ClassWithPortsHasOP link in links )
			{
				if ( target.Equals(link.OP) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship StateReferencesTargetStated
	/// Description for Company.MobileDSL.StateReferencesTargetStated
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesTargetStated.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesTargetStated.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("faf0a320-6eb9-4187-a2d4-775127f28de0")]
	public partial class StateReferencesTargetStated : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StateReferencesTargetStated domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfaf0a320, 0x6eb9, 0x4187, 0xa2, 0xd4, 0x77, 0x51, 0x27, 0xf2, 0x8d, 0xe0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StateReferencesTargetStated link in the same Partition as the given State
		/// </summary>
		/// <param name="source">State to use as the source of the relationship.</param>
		/// <param name="target">State to use as the target of the relationship.</param>
		public StateReferencesTargetStated(State source, State target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StateReferencesTargetStated.SourceStateDomainRoleId, source), new DslModeling::RoleAssignment(StateReferencesTargetStated.TargetStateDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateReferencesTargetStated(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateReferencesTargetStated(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateReferencesTargetStated(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateReferencesTargetStated(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceState domain role code
		
		/// <summary>
		/// SourceState domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceStateDomainRoleId = new global::System.Guid(0xc3b8c31c, 0x8d32, 0x41d0, 0x8a, 0x9d, 0x3a, 0x6c, 0x4c, 0x8d, 0xad, 0x8f);
		
		/// <summary>
		/// DomainRole SourceState
		/// Description for Company.MobileDSL.StateReferencesTargetStated.SourceState
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesTargetStated/SourceState.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesTargetStated/SourceState.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetStated", PropertyDisplayNameKey="Company.MobileDSL.StateReferencesTargetStated/SourceState.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c3b8c31c-8d32-41d0-8a9d-3a6c4c8dad8f")]
		public virtual State SourceState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceStateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceStateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceStated of a State
		/// <summary>
		/// Gets a list of SourceStated.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State> GetSourceStated(State element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(element, TargetStateDomainRoleId);
		}
		#endregion
		#region TargetState domain role code
		
		/// <summary>
		/// TargetState domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetStateDomainRoleId = new global::System.Guid(0xc15ef834, 0x0511, 0x4b49, 0xbf, 0x47, 0x27, 0xb4, 0x34, 0x38, 0x35, 0xd2);
		
		/// <summary>
		/// DomainRole TargetState
		/// Description for Company.MobileDSL.StateReferencesTargetStated.TargetState
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesTargetStated/TargetState.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesTargetStated/TargetState.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceStated", PropertyDisplayNameKey="Company.MobileDSL.StateReferencesTargetStated/TargetState.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c15ef834-0511-4b49-bf47-27b4343835d2")]
		public virtual State TargetState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetStateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetStateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetStated of a State
		/// <summary>
		/// Gets a list of TargetStated.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State> GetTargetStated(State element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(element, SourceStateDomainRoleId);
		}
		#endregion
		#region SourceState link accessor
		/// <summary>
		/// Get the list of StateReferencesTargetStated links to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateReferencesTargetStated> GetLinksToTargetStated ( global::Company.MobileDSL.State sourceStateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesTargetStated>(sourceStateInstance, global::Company.MobileDSL.StateReferencesTargetStated.SourceStateDomainRoleId);
		}
		#endregion
		#region TargetState link accessor
		/// <summary>
		/// Get the list of StateReferencesTargetStated links to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateReferencesTargetStated> GetLinksToSourceStated ( global::Company.MobileDSL.State targetStateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesTargetStated>(targetStateInstance, global::Company.MobileDSL.StateReferencesTargetStated.TargetStateDomainRoleId);
		}
		#endregion
		#region StateReferencesTargetStated instance accessors
		
		/// <summary>
		/// Get any StateReferencesTargetStated links between a given State and a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateReferencesTargetStated> GetLinks( global::Company.MobileDSL.State source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.StateReferencesTargetStated> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.StateReferencesTargetStated>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateReferencesTargetStated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesTargetStated>(source, global::Company.MobileDSL.StateReferencesTargetStated.SourceStateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateReferencesTargetStated link in links )
			{
				if ( target.Equals(link.TargetState) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StateReferencesTargetStated link between a given Stateand a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateReferencesTargetStated GetLink( global::Company.MobileDSL.State source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateReferencesTargetStated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesTargetStated>(source, global::Company.MobileDSL.StateReferencesTargetStated.SourceStateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateReferencesTargetStated link in links )
			{
				if ( target.Equals(link.TargetState) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship StateReferencesPs
	/// Description for Company.MobileDSL.StateReferencesPs
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesPs.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesPs.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fcedf7a8-098f-49ee-b327-abccac101b82")]
	public partial class StateReferencesPs : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StateReferencesPs domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfcedf7a8, 0x098f, 0x49ee, 0xb3, 0x27, 0xab, 0xcc, 0xac, 0x10, 0x1b, 0x82);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StateReferencesPs link in the same Partition as the given State
		/// </summary>
		/// <param name="source">State to use as the source of the relationship.</param>
		/// <param name="target">P to use as the target of the relationship.</param>
		public StateReferencesPs(State source, P target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StateReferencesPs.StateDomainRoleId, source), new DslModeling::RoleAssignment(StateReferencesPs.PDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateReferencesPs(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateReferencesPs(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateReferencesPs(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateReferencesPs(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0xb709664c, 0x7d68, 0x4f3d, 0x9c, 0x41, 0xf1, 0xa1, 0xc8, 0x71, 0x7d, 0xbe);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.StateReferencesPs.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesPs/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesPs/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ps", PropertyDisplayNameKey="Company.MobileDSL.StateReferencesPs/State.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b709664c-7d68-4f3d-9c41-f1a1c8717dbe")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Stated of a P
		/// <summary>
		/// Gets a list of Stated.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State> GetStated(P element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(element, PDomainRoleId);
		}
		#endregion
		#region P domain role code
		
		/// <summary>
		/// P domain role Id.
		/// </summary>
		public static readonly global::System.Guid PDomainRoleId = new global::System.Guid(0x02cd2746, 0xcb9f, 0x4b9d, 0x86, 0xf5, 0xe3, 0xa8, 0xb2, 0xf7, 0x68, 0x45);
		
		/// <summary>
		/// DomainRole P
		/// Description for Company.MobileDSL.StateReferencesPs.P
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesPs/P.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesPs/P.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Stated", PropertyDisplayNameKey="Company.MobileDSL.StateReferencesPs/P.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("02cd2746-cb9f-4b9d-86f5-e3a8b2f76845")]
		public virtual P P
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (P)DslModeling::DomainRoleInfo.GetRolePlayer(this, PDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ps of a State
		/// <summary>
		/// Gets a list of Ps.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<P> GetPs(State element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<P>, P>(element, StateDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the list of StateReferencesPs links to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateReferencesPs> GetLinksToPs ( global::Company.MobileDSL.State stateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesPs>(stateInstance, global::Company.MobileDSL.StateReferencesPs.StateDomainRoleId);
		}
		#endregion
		#region P link accessor
		/// <summary>
		/// Get the list of StateReferencesPs links to a P.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateReferencesPs> GetLinksToStated ( global::Company.MobileDSL.P pInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesPs>(pInstance, global::Company.MobileDSL.StateReferencesPs.PDomainRoleId);
		}
		#endregion
		#region StateReferencesPs instance accessors
		
		/// <summary>
		/// Get any StateReferencesPs links between a given State and a P.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateReferencesPs> GetLinks( global::Company.MobileDSL.State source, global::Company.MobileDSL.P target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.StateReferencesPs> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.StateReferencesPs>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateReferencesPs> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesPs>(source, global::Company.MobileDSL.StateReferencesPs.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateReferencesPs link in links )
			{
				if ( target.Equals(link.P) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StateReferencesPs link between a given Stateand a P.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateReferencesPs GetLink( global::Company.MobileDSL.State source, global::Company.MobileDSL.P target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateReferencesPs> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesPs>(source, global::Company.MobileDSL.StateReferencesPs.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateReferencesPs link in links )
			{
				if ( target.Equals(link.P) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship StateHasConditionalBlocks
	/// Description for Company.MobileDSL.StateHasConditionalBlocks
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasConditionalBlocks.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.StateHasConditionalBlocks.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("12b71c63-b289-4765-92ee-dcdd1f7a58c6")]
	public partial class StateHasConditionalBlocks : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StateHasConditionalBlocks domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x12b71c63, 0xb289, 0x4765, 0x92, 0xee, 0xdc, 0xdd, 0x1f, 0x7a, 0x58, 0xc6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StateHasConditionalBlocks link in the same Partition as the given State
		/// </summary>
		/// <param name="source">State to use as the source of the relationship.</param>
		/// <param name="target">ConditionalBlock to use as the target of the relationship.</param>
		public StateHasConditionalBlocks(State source, ConditionalBlock target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StateHasConditionalBlocks.StateDomainRoleId, source), new DslModeling::RoleAssignment(StateHasConditionalBlocks.ConditionalBlockDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasConditionalBlocks(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasConditionalBlocks(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasConditionalBlocks(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasConditionalBlocks(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0x18380384, 0x6a3f, 0x42e6, 0x8a, 0x6e, 0xdd, 0xf7, 0x12, 0x00, 0x91, 0x5f);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.StateHasConditionalBlocks.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasConditionalBlocks/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateHasConditionalBlocks/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConditionalBlocks", PropertyDisplayNameKey="Company.MobileDSL.StateHasConditionalBlocks/State.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("18380384-6a3f-42e6-8a6e-ddf71200915f")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access State of a ConditionalBlock
		/// <summary>
		/// Gets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static State GetState(ConditionalBlock element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConditionalBlockDomainRoleId) as State;
		}
		
		/// <summary>
		/// Sets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetState(ConditionalBlock element, State newState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConditionalBlockDomainRoleId, newState);
		}
		#endregion
		#region ConditionalBlock domain role code
		
		/// <summary>
		/// ConditionalBlock domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConditionalBlockDomainRoleId = new global::System.Guid(0xeb2a76d0, 0x9fbb, 0x48e6, 0x83, 0xcf, 0x96, 0x65, 0x5f, 0x94, 0x97, 0x75);
		
		/// <summary>
		/// DomainRole ConditionalBlock
		/// Description for Company.MobileDSL.StateHasConditionalBlocks.ConditionalBlock
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasConditionalBlocks/ConditionalBlock.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateHasConditionalBlocks/ConditionalBlock.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "State", PropertyDisplayNameKey="Company.MobileDSL.StateHasConditionalBlocks/ConditionalBlock.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("eb2a76d0-9fbb-48e6-83cf-96655f949775")]
		public virtual ConditionalBlock ConditionalBlock
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConditionalBlock)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConditionalBlockDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConditionalBlockDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConditionalBlocks of a State
		/// <summary>
		/// Gets a list of ConditionalBlocks.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConditionalBlock> GetConditionalBlocks(State element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConditionalBlock>, ConditionalBlock>(element, StateDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the list of StateHasConditionalBlocks links to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateHasConditionalBlocks> GetLinksToConditionalBlocks ( global::Company.MobileDSL.State stateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasConditionalBlocks>(stateInstance, global::Company.MobileDSL.StateHasConditionalBlocks.StateDomainRoleId);
		}
		#endregion
		#region ConditionalBlock link accessor
		/// <summary>
		/// Get the StateHasConditionalBlocks link to a ConditionalBlock.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateHasConditionalBlocks GetLinkToState (global::Company.MobileDSL.ConditionalBlock conditionalBlockInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasConditionalBlocks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasConditionalBlocks>(conditionalBlockInstance, global::Company.MobileDSL.StateHasConditionalBlocks.ConditionalBlockDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConditionalBlock not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region StateHasConditionalBlocks instance accessors
		
		/// <summary>
		/// Get any StateHasConditionalBlocks links between a given State and a ConditionalBlock.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateHasConditionalBlocks> GetLinks( global::Company.MobileDSL.State source, global::Company.MobileDSL.ConditionalBlock target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.StateHasConditionalBlocks> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.StateHasConditionalBlocks>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasConditionalBlocks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasConditionalBlocks>(source, global::Company.MobileDSL.StateHasConditionalBlocks.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateHasConditionalBlocks link in links )
			{
				if ( target.Equals(link.ConditionalBlock) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StateHasConditionalBlocks link between a given Stateand a ConditionalBlock.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateHasConditionalBlocks GetLink( global::Company.MobileDSL.State source, global::Company.MobileDSL.ConditionalBlock target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasConditionalBlocks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasConditionalBlocks>(source, global::Company.MobileDSL.StateHasConditionalBlocks.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateHasConditionalBlocks link in links )
			{
				if ( target.Equals(link.ConditionalBlock) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship StateHasServiceCalls
	/// Description for Company.MobileDSL.StateHasServiceCalls
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasServiceCalls.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.StateHasServiceCalls.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fb603010-b3d3-493c-870d-8321e2460494")]
	public partial class StateHasServiceCalls : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StateHasServiceCalls domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfb603010, 0xb3d3, 0x493c, 0x87, 0x0d, 0x83, 0x21, 0xe2, 0x46, 0x04, 0x94);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StateHasServiceCalls link in the same Partition as the given State
		/// </summary>
		/// <param name="source">State to use as the source of the relationship.</param>
		/// <param name="target">ServiceCall to use as the target of the relationship.</param>
		public StateHasServiceCalls(State source, ServiceCall target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StateHasServiceCalls.StateDomainRoleId, source), new DslModeling::RoleAssignment(StateHasServiceCalls.ServiceCallDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasServiceCalls(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasServiceCalls(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasServiceCalls(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasServiceCalls(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0x94b6179a, 0xcee1, 0x4783, 0x83, 0x5a, 0x8e, 0x30, 0x61, 0x59, 0x23, 0x1c);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.StateHasServiceCalls.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasServiceCalls/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateHasServiceCalls/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ServiceCalls", PropertyDisplayNameKey="Company.MobileDSL.StateHasServiceCalls/State.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("94b6179a-cee1-4783-835a-8e306159231c")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access State of a ServiceCall
		/// <summary>
		/// Gets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static State GetState(ServiceCall element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ServiceCallDomainRoleId) as State;
		}
		
		/// <summary>
		/// Sets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetState(ServiceCall element, State newState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ServiceCallDomainRoleId, newState);
		}
		#endregion
		#region ServiceCall domain role code
		
		/// <summary>
		/// ServiceCall domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceCallDomainRoleId = new global::System.Guid(0x4c37c80a, 0x21ee, 0x427f, 0x87, 0x8a, 0x65, 0xd5, 0xe2, 0x84, 0xf6, 0xff);
		
		/// <summary>
		/// DomainRole ServiceCall
		/// Description for Company.MobileDSL.StateHasServiceCalls.ServiceCall
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasServiceCalls/ServiceCall.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateHasServiceCalls/ServiceCall.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "State", PropertyDisplayNameKey="Company.MobileDSL.StateHasServiceCalls/ServiceCall.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4c37c80a-21ee-427f-878a-65d5e284f6ff")]
		public virtual ServiceCall ServiceCall
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceCall)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceCallDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceCallDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceCalls of a State
		/// <summary>
		/// Gets a list of ServiceCalls.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ServiceCall> GetServiceCalls(State element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ServiceCall>, ServiceCall>(element, StateDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the list of StateHasServiceCalls links to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateHasServiceCalls> GetLinksToServiceCalls ( global::Company.MobileDSL.State stateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasServiceCalls>(stateInstance, global::Company.MobileDSL.StateHasServiceCalls.StateDomainRoleId);
		}
		#endregion
		#region ServiceCall link accessor
		/// <summary>
		/// Get the StateHasServiceCalls link to a ServiceCall.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateHasServiceCalls GetLinkToState (global::Company.MobileDSL.ServiceCall serviceCallInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasServiceCalls> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasServiceCalls>(serviceCallInstance, global::Company.MobileDSL.StateHasServiceCalls.ServiceCallDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ServiceCall not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region StateHasServiceCalls instance accessors
		
		/// <summary>
		/// Get any StateHasServiceCalls links between a given State and a ServiceCall.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateHasServiceCalls> GetLinks( global::Company.MobileDSL.State source, global::Company.MobileDSL.ServiceCall target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.StateHasServiceCalls> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.StateHasServiceCalls>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasServiceCalls> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasServiceCalls>(source, global::Company.MobileDSL.StateHasServiceCalls.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateHasServiceCalls link in links )
			{
				if ( target.Equals(link.ServiceCall) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StateHasServiceCalls link between a given Stateand a ServiceCall.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateHasServiceCalls GetLink( global::Company.MobileDSL.State source, global::Company.MobileDSL.ServiceCall target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasServiceCalls> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasServiceCalls>(source, global::Company.MobileDSL.StateHasServiceCalls.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateHasServiceCalls link in links )
			{
				if ( target.Equals(link.ServiceCall) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship StateHasAppCodes
	/// Description for Company.MobileDSL.StateHasAppCodes
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasAppCodes.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.StateHasAppCodes.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("828d9c19-dd32-4250-8a48-f0879ecf6ea6")]
	public partial class StateHasAppCodes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StateHasAppCodes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x828d9c19, 0xdd32, 0x4250, 0x8a, 0x48, 0xf0, 0x87, 0x9e, 0xcf, 0x6e, 0xa6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StateHasAppCodes link in the same Partition as the given State
		/// </summary>
		/// <param name="source">State to use as the source of the relationship.</param>
		/// <param name="target">AppCode to use as the target of the relationship.</param>
		public StateHasAppCodes(State source, AppCode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StateHasAppCodes.StateDomainRoleId, source), new DslModeling::RoleAssignment(StateHasAppCodes.AppCodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasAppCodes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasAppCodes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasAppCodes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasAppCodes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0x347d72bc, 0x2cbd, 0x43dd, 0xbf, 0xa3, 0xfb, 0xc5, 0xa0, 0xf8, 0xb6, 0xbd);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.StateHasAppCodes.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasAppCodes/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateHasAppCodes/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AppCodes", PropertyDisplayNameKey="Company.MobileDSL.StateHasAppCodes/State.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("347d72bc-2cbd-43dd-bfa3-fbc5a0f8b6bd")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access State of a AppCode
		/// <summary>
		/// Gets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static State GetState(AppCode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AppCodeDomainRoleId) as State;
		}
		
		/// <summary>
		/// Sets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetState(AppCode element, State newState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AppCodeDomainRoleId, newState);
		}
		#endregion
		#region AppCode domain role code
		
		/// <summary>
		/// AppCode domain role Id.
		/// </summary>
		public static readonly global::System.Guid AppCodeDomainRoleId = new global::System.Guid(0xa2f2e80f, 0xece7, 0x42fb, 0x8f, 0xdc, 0xc5, 0x09, 0xd7, 0x4d, 0xdb, 0xb5);
		
		/// <summary>
		/// DomainRole AppCode
		/// Description for Company.MobileDSL.StateHasAppCodes.AppCode
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasAppCodes/AppCode.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateHasAppCodes/AppCode.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "State", PropertyDisplayNameKey="Company.MobileDSL.StateHasAppCodes/AppCode.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a2f2e80f-ece7-42fb-8fdc-c509d74ddbb5")]
		public virtual AppCode AppCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AppCode)DslModeling::DomainRoleInfo.GetRolePlayer(this, AppCodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AppCodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AppCodes of a State
		/// <summary>
		/// Gets a list of AppCodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AppCode> GetAppCodes(State element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AppCode>, AppCode>(element, StateDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the list of StateHasAppCodes links to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateHasAppCodes> GetLinksToAppCodes ( global::Company.MobileDSL.State stateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasAppCodes>(stateInstance, global::Company.MobileDSL.StateHasAppCodes.StateDomainRoleId);
		}
		#endregion
		#region AppCode link accessor
		/// <summary>
		/// Get the StateHasAppCodes link to a AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateHasAppCodes GetLinkToState (global::Company.MobileDSL.AppCode appCodeInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasAppCodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasAppCodes>(appCodeInstance, global::Company.MobileDSL.StateHasAppCodes.AppCodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AppCode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region StateHasAppCodes instance accessors
		
		/// <summary>
		/// Get any StateHasAppCodes links between a given State and a AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateHasAppCodes> GetLinks( global::Company.MobileDSL.State source, global::Company.MobileDSL.AppCode target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.StateHasAppCodes> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.StateHasAppCodes>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasAppCodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasAppCodes>(source, global::Company.MobileDSL.StateHasAppCodes.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateHasAppCodes link in links )
			{
				if ( target.Equals(link.AppCode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StateHasAppCodes link between a given Stateand a AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateHasAppCodes GetLink( global::Company.MobileDSL.State source, global::Company.MobileDSL.AppCode target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasAppCodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasAppCodes>(source, global::Company.MobileDSL.StateHasAppCodes.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateHasAppCodes link in links )
			{
				if ( target.Equals(link.AppCode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship AppCodeHasStringCodes
	/// Description for Company.MobileDSL.AppCodeHasStringCodes
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.AppCodeHasStringCodes.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.AppCodeHasStringCodes.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ba486b5b-77ac-4fac-8c02-d69e5f0c037e")]
	public partial class AppCodeHasStringCodes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AppCodeHasStringCodes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xba486b5b, 0x77ac, 0x4fac, 0x8c, 0x02, 0xd6, 0x9e, 0x5f, 0x0c, 0x03, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AppCodeHasStringCodes link in the same Partition as the given AppCode
		/// </summary>
		/// <param name="source">AppCode to use as the source of the relationship.</param>
		/// <param name="target">StringCode to use as the target of the relationship.</param>
		public AppCodeHasStringCodes(AppCode source, StringCode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AppCodeHasStringCodes.AppCodeDomainRoleId, source), new DslModeling::RoleAssignment(AppCodeHasStringCodes.StringCodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AppCodeHasStringCodes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AppCodeHasStringCodes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AppCodeHasStringCodes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AppCodeHasStringCodes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AppCode domain role code
		
		/// <summary>
		/// AppCode domain role Id.
		/// </summary>
		public static readonly global::System.Guid AppCodeDomainRoleId = new global::System.Guid(0xb8ce55cc, 0x3c59, 0x4327, 0xa4, 0x56, 0x99, 0x56, 0x1f, 0xb8, 0x73, 0x52);
		
		/// <summary>
		/// DomainRole AppCode
		/// Description for Company.MobileDSL.AppCodeHasStringCodes.AppCode
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.AppCodeHasStringCodes/AppCode.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.AppCodeHasStringCodes/AppCode.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "StringCodes", PropertyDisplayNameKey="Company.MobileDSL.AppCodeHasStringCodes/AppCode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b8ce55cc-3c59-4327-a456-99561fb87352")]
		public virtual AppCode AppCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AppCode)DslModeling::DomainRoleInfo.GetRolePlayer(this, AppCodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AppCodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AppCode of a StringCode
		/// <summary>
		/// Gets AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AppCode GetAppCode(StringCode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StringCodeDomainRoleId) as AppCode;
		}
		
		/// <summary>
		/// Sets AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAppCode(StringCode element, AppCode newAppCode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StringCodeDomainRoleId, newAppCode);
		}
		#endregion
		#region StringCode domain role code
		
		/// <summary>
		/// StringCode domain role Id.
		/// </summary>
		public static readonly global::System.Guid StringCodeDomainRoleId = new global::System.Guid(0xd6e0eec0, 0x3ac3, 0x46a7, 0xbc, 0x29, 0xae, 0x66, 0x4b, 0xe7, 0x6f, 0xf7);
		
		/// <summary>
		/// DomainRole StringCode
		/// Description for Company.MobileDSL.AppCodeHasStringCodes.StringCode
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.AppCodeHasStringCodes/StringCode.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.AppCodeHasStringCodes/StringCode.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AppCode", PropertyDisplayNameKey="Company.MobileDSL.AppCodeHasStringCodes/StringCode.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d6e0eec0-3ac3-46a7-bc29-ae664be76ff7")]
		public virtual StringCode StringCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StringCode)DslModeling::DomainRoleInfo.GetRolePlayer(this, StringCodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StringCodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access StringCodes of a AppCode
		/// <summary>
		/// Gets a list of StringCodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<StringCode> GetStringCodes(AppCode element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<StringCode>, StringCode>(element, AppCodeDomainRoleId);
		}
		#endregion
		#region AppCode link accessor
		/// <summary>
		/// Get the list of AppCodeHasStringCodes links to a AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.AppCodeHasStringCodes> GetLinksToStringCodes ( global::Company.MobileDSL.AppCode appCodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.AppCodeHasStringCodes>(appCodeInstance, global::Company.MobileDSL.AppCodeHasStringCodes.AppCodeDomainRoleId);
		}
		#endregion
		#region StringCode link accessor
		/// <summary>
		/// Get the AppCodeHasStringCodes link to a StringCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.AppCodeHasStringCodes GetLinkToAppCode (global::Company.MobileDSL.StringCode stringCodeInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.AppCodeHasStringCodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.AppCodeHasStringCodes>(stringCodeInstance, global::Company.MobileDSL.AppCodeHasStringCodes.StringCodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of StringCode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AppCodeHasStringCodes instance accessors
		
		/// <summary>
		/// Get any AppCodeHasStringCodes links between a given AppCode and a StringCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.AppCodeHasStringCodes> GetLinks( global::Company.MobileDSL.AppCode source, global::Company.MobileDSL.StringCode target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.AppCodeHasStringCodes> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.AppCodeHasStringCodes>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.AppCodeHasStringCodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.AppCodeHasStringCodes>(source, global::Company.MobileDSL.AppCodeHasStringCodes.AppCodeDomainRoleId);
			foreach ( global::Company.MobileDSL.AppCodeHasStringCodes link in links )
			{
				if ( target.Equals(link.StringCode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AppCodeHasStringCodes link between a given AppCodeand a StringCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.AppCodeHasStringCodes GetLink( global::Company.MobileDSL.AppCode source, global::Company.MobileDSL.StringCode target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.AppCodeHasStringCodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.AppCodeHasStringCodes>(source, global::Company.MobileDSL.AppCodeHasStringCodes.AppCodeDomainRoleId);
			foreach ( global::Company.MobileDSL.AppCodeHasStringCodes link in links )
			{
				if ( target.Equals(link.StringCode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship StateHasUIDataLinks
	/// Description for Company.MobileDSL.StateHasUIDataLinks
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasUIDataLinks.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.StateHasUIDataLinks.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("97bf79b1-baeb-44ea-9c65-b541bb1b75a5")]
	public partial class StateHasUIDataLinks : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StateHasUIDataLinks domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x97bf79b1, 0xbaeb, 0x44ea, 0x9c, 0x65, 0xb5, 0x41, 0xbb, 0x1b, 0x75, 0xa5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StateHasUIDataLinks link in the same Partition as the given State
		/// </summary>
		/// <param name="source">State to use as the source of the relationship.</param>
		/// <param name="target">UIDLink to use as the target of the relationship.</param>
		public StateHasUIDataLinks(State source, UIDLink target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StateHasUIDataLinks.StateDomainRoleId, source), new DslModeling::RoleAssignment(StateHasUIDataLinks.UIDLinkDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasUIDataLinks(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasUIDataLinks(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateHasUIDataLinks(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateHasUIDataLinks(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0x8047e71b, 0xbc0b, 0x494e, 0xac, 0x24, 0xc6, 0x9a, 0x8d, 0xf2, 0x51, 0x60);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.StateHasUIDataLinks.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasUIDataLinks/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateHasUIDataLinks/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UIDataLinks", PropertyDisplayNameKey="Company.MobileDSL.StateHasUIDataLinks/State.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8047e71b-bc0b-494e-ac24-c69a8df25160")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access State of a UIDLink
		/// <summary>
		/// Gets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static State GetState(UIDLink element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UIDLinkDomainRoleId) as State;
		}
		
		/// <summary>
		/// Sets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetState(UIDLink element, State newState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UIDLinkDomainRoleId, newState);
		}
		#endregion
		#region UIDLink domain role code
		
		/// <summary>
		/// UIDLink domain role Id.
		/// </summary>
		public static readonly global::System.Guid UIDLinkDomainRoleId = new global::System.Guid(0xd4e81697, 0x20f7, 0x4782, 0x8d, 0xeb, 0x4c, 0x04, 0x69, 0xdf, 0xbf, 0x5b);
		
		/// <summary>
		/// DomainRole UIDLink
		/// Description for Company.MobileDSL.StateHasUIDataLinks.UIDLink
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateHasUIDataLinks/UIDLink.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateHasUIDataLinks/UIDLink.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "State", PropertyDisplayNameKey="Company.MobileDSL.StateHasUIDataLinks/UIDLink.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d4e81697-20f7-4782-8deb-4c0469dfbf5b")]
		public virtual UIDLink UIDLink
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UIDLink)DslModeling::DomainRoleInfo.GetRolePlayer(this, UIDLinkDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UIDLinkDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UIDataLinks of a State
		/// <summary>
		/// Gets a list of UIDataLinks.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UIDLink> GetUIDataLinks(State element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<UIDLink>, UIDLink>(element, StateDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the list of StateHasUIDataLinks links to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateHasUIDataLinks> GetLinksToUIDataLinks ( global::Company.MobileDSL.State stateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasUIDataLinks>(stateInstance, global::Company.MobileDSL.StateHasUIDataLinks.StateDomainRoleId);
		}
		#endregion
		#region UIDLink link accessor
		/// <summary>
		/// Get the StateHasUIDataLinks link to a UIDLink.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateHasUIDataLinks GetLinkToState (global::Company.MobileDSL.UIDLink uIDLinkInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasUIDataLinks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasUIDataLinks>(uIDLinkInstance, global::Company.MobileDSL.StateHasUIDataLinks.UIDLinkDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UIDLink not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region StateHasUIDataLinks instance accessors
		
		/// <summary>
		/// Get any StateHasUIDataLinks links between a given State and a UIDLink.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateHasUIDataLinks> GetLinks( global::Company.MobileDSL.State source, global::Company.MobileDSL.UIDLink target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.StateHasUIDataLinks> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.StateHasUIDataLinks>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasUIDataLinks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasUIDataLinks>(source, global::Company.MobileDSL.StateHasUIDataLinks.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateHasUIDataLinks link in links )
			{
				if ( target.Equals(link.UIDLink) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StateHasUIDataLinks link between a given Stateand a UIDLink.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateHasUIDataLinks GetLink( global::Company.MobileDSL.State source, global::Company.MobileDSL.UIDLink target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateHasUIDataLinks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateHasUIDataLinks>(source, global::Company.MobileDSL.StateHasUIDataLinks.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateHasUIDataLinks link in links )
			{
				if ( target.Equals(link.UIDLink) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship UIDLinkHasStringCodes
	/// Description for Company.MobileDSL.UIDLinkHasStringCodes
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.UIDLinkHasStringCodes.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.UIDLinkHasStringCodes.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("703aa994-e761-4de3-a4ce-9a026e5d2413")]
	public partial class UIDLinkHasStringCodes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UIDLinkHasStringCodes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x703aa994, 0xe761, 0x4de3, 0xa4, 0xce, 0x9a, 0x02, 0x6e, 0x5d, 0x24, 0x13);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UIDLinkHasStringCodes link in the same Partition as the given UIDLink
		/// </summary>
		/// <param name="source">UIDLink to use as the source of the relationship.</param>
		/// <param name="target">StringCode to use as the target of the relationship.</param>
		public UIDLinkHasStringCodes(UIDLink source, StringCode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UIDLinkHasStringCodes.UIDLinkDomainRoleId, source), new DslModeling::RoleAssignment(UIDLinkHasStringCodes.StringCodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UIDLinkHasStringCodes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UIDLinkHasStringCodes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UIDLinkHasStringCodes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UIDLinkHasStringCodes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UIDLink domain role code
		
		/// <summary>
		/// UIDLink domain role Id.
		/// </summary>
		public static readonly global::System.Guid UIDLinkDomainRoleId = new global::System.Guid(0x55ca1bcf, 0x13ff, 0x43de, 0x86, 0xbb, 0xad, 0x7b, 0x2a, 0xbb, 0xeb, 0xfb);
		
		/// <summary>
		/// DomainRole UIDLink
		/// Description for Company.MobileDSL.UIDLinkHasStringCodes.UIDLink
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.UIDLinkHasStringCodes/UIDLink.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.UIDLinkHasStringCodes/UIDLink.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "StringCodes", PropertyDisplayNameKey="Company.MobileDSL.UIDLinkHasStringCodes/UIDLink.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("55ca1bcf-13ff-43de-86bb-ad7b2abbebfb")]
		public virtual UIDLink UIDLink
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UIDLink)DslModeling::DomainRoleInfo.GetRolePlayer(this, UIDLinkDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UIDLinkDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UIDLink of a StringCode
		/// <summary>
		/// Gets UIDLink.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UIDLink GetUIDLink(StringCode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StringCodeDomainRoleId) as UIDLink;
		}
		
		/// <summary>
		/// Sets UIDLink.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUIDLink(StringCode element, UIDLink newUIDLink)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StringCodeDomainRoleId, newUIDLink);
		}
		#endregion
		#region StringCode domain role code
		
		/// <summary>
		/// StringCode domain role Id.
		/// </summary>
		public static readonly global::System.Guid StringCodeDomainRoleId = new global::System.Guid(0xa7652db4, 0xab79, 0x4e9f, 0x9d, 0x1a, 0x9c, 0x12, 0xa4, 0xd9, 0xac, 0xdb);
		
		/// <summary>
		/// DomainRole StringCode
		/// Description for Company.MobileDSL.UIDLinkHasStringCodes.StringCode
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.UIDLinkHasStringCodes/StringCode.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.UIDLinkHasStringCodes/StringCode.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UIDLink", PropertyDisplayNameKey="Company.MobileDSL.UIDLinkHasStringCodes/StringCode.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a7652db4-ab79-4e9f-9d1a-9c12a4d9acdb")]
		public virtual StringCode StringCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StringCode)DslModeling::DomainRoleInfo.GetRolePlayer(this, StringCodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StringCodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access StringCodes of a UIDLink
		/// <summary>
		/// Gets a list of StringCodes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<StringCode> GetStringCodes(UIDLink element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<StringCode>, StringCode>(element, UIDLinkDomainRoleId);
		}
		#endregion
		#region UIDLink link accessor
		/// <summary>
		/// Get the list of UIDLinkHasStringCodes links to a UIDLink.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.UIDLinkHasStringCodes> GetLinksToStringCodes ( global::Company.MobileDSL.UIDLink uIDLinkInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.UIDLinkHasStringCodes>(uIDLinkInstance, global::Company.MobileDSL.UIDLinkHasStringCodes.UIDLinkDomainRoleId);
		}
		#endregion
		#region StringCode link accessor
		/// <summary>
		/// Get the UIDLinkHasStringCodes link to a StringCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.UIDLinkHasStringCodes GetLinkToUIDLink (global::Company.MobileDSL.StringCode stringCodeInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.UIDLinkHasStringCodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.UIDLinkHasStringCodes>(stringCodeInstance, global::Company.MobileDSL.UIDLinkHasStringCodes.StringCodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of StringCode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UIDLinkHasStringCodes instance accessors
		
		/// <summary>
		/// Get any UIDLinkHasStringCodes links between a given UIDLink and a StringCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.UIDLinkHasStringCodes> GetLinks( global::Company.MobileDSL.UIDLink source, global::Company.MobileDSL.StringCode target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.UIDLinkHasStringCodes> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.UIDLinkHasStringCodes>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.UIDLinkHasStringCodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.UIDLinkHasStringCodes>(source, global::Company.MobileDSL.UIDLinkHasStringCodes.UIDLinkDomainRoleId);
			foreach ( global::Company.MobileDSL.UIDLinkHasStringCodes link in links )
			{
				if ( target.Equals(link.StringCode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UIDLinkHasStringCodes link between a given UIDLinkand a StringCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.UIDLinkHasStringCodes GetLink( global::Company.MobileDSL.UIDLink source, global::Company.MobileDSL.StringCode target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.UIDLinkHasStringCodes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.UIDLinkHasStringCodes>(source, global::Company.MobileDSL.UIDLinkHasStringCodes.UIDLinkDomainRoleId);
			foreach ( global::Company.MobileDSL.UIDLinkHasStringCodes link in links )
			{
				if ( target.Equals(link.StringCode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
