<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ MobileDSL processor="MobileDSLDirectiveProcessor" requires="fileName='../train.mdsl'"  #>
<#@ import namespace="System.Reflection" #>
<#@ include file="lib.tt"#>
//Generated material. Generating code in C#.

<# foreach (Controller controller in this.ComponentModel.Controllers) { #>

	public class <#= controller.Name #>  : Controller{ 

	enum <#= controller.Name #>State { 
      <# foreach (State state in controller.States) { #>
            <#= state.Name #>,
      <#}#>
    }
  private <#=controller.Name#>State controllerState =  <#=controller.Name#>State.<#insertMainState(controller);#>;

 	public override void action(){          
  	<#makeSwitchStatement(controller);#>
	}

	<# foreach (State state in controller.States) { #> 
//--------------------------------------------------
	  <# foreach (ShowForm form in state.ShowForms) { #> 
				<#compileShowFormFunction(form);#>
        
      <#}#>
      <#compileRunState(state);#>
	
    <#}#>
	<#}#>
}


<#+	// 1 =======================================================  
private void insertMainState(Controller controller){
	IP ip = controller.IP.ChildConnections.ToArray()[0] as IP ;
	#><#= ip.Parent.Name#><#+
}

  	// 2 =======================================================  
private void makeSwitchStatement(Controller controller)  {#>
switch(controllerState){
<#+  
	foreach (State state in controller.States)
        {#> 
case <#=controller.Name#>State.<#=state.Name#>: 
run<#=state.Name#>();
break;
<#+}#>
}
<#+}
//	3====== ShowForm function generation  ================  
private void compileShowFormFunction(ShowForm form) {

	#> private void show<#= form.Name #>(){
			
		    <#+ 
				 foreach (Primitive pr in form.Primitives) {
					//if(pr.Parent != ""){ continue; }
				#>
					<#+generatePrimitive(pr);#>
					<#+
				} //foreach

				foreach ( Event ev in form.Events ) {
  	 			#><#= ev.PrimitiveName #>. <#= ev.Type #> += (sender, args) => {
					 	<#+ foreach (C c in C.GetLinksToChildConnections(form)) {  
        			if(c.FromEvent != ev.Name){continue;}
							connectWith(c.TargetConnectable, c);
      			}#>
					 }; 
					 <#+			
				}

				#>
				var panel = {Children = {<#+ foreach(Primitive pr in form.Primitives){if(pr.Parent == "" )newCell(pr.Name, ','); } #> },};
				Screen.Content = panel;

	} <#+ // ### private void Show

}//$$$ compileShowFormFunction

//=======================================================  
private void connectWith(Connectable conn, C link) {
	if(conn.GetType() == typeof(Company.MobileDSL.OP)){
		OP oPort = conn as OP;
		if(link.NextController != ""){
		#> 
				this.app.currentController = <#=link.NextController#>.getInstance(this.app);
				this.app.changed = true;
		<#+
		}else{
			State state = oPort.Parent as State; 
			#> controllerState = <#=state.Controller.Name#>State.<#=link.NextState#>; <#+
		}
	}
}

//========================= Print Class Properties ==============================
private void printProperties(Type t){
	foreach ( PropertyInfo pInfo in t.GetProperties() ) {
								#><#= pInfo.Name #> ||| <#+ 
							}
}
//=======================================================  
private void compileRunState(State state) {
#> 
    private void run<#= state.Name#>(){
	<#+
	Connectable firstElement = getChild(state.IP, 0); 
	
	generate(firstElement);#>
	}

<#+}//$$$ compileRunState

//============================================================
private void generate(Connectable el){
	if(isShowForm(el)){
		ShowForm showForm = el as ShowForm;
		#>show<#= showForm.Name#>();<#+
	}
}

//============================================================
private bool isShowForm(Connectable connectable) {
	return connectable.GetType().ToString().Contains("ShowForm");
}

//============================================================
private Connectable getChild(Connectable connectable, int index){
	return connectable.ChildConnections.ToArray()[index];
}

//=============== new Cell generation for StackPanel Children ====
private void newCell(string str, char c){
	#>new Cell{Content = <#= str #>} <#= c #>
				<#+ 
}
#>