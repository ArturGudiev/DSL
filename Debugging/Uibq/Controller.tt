<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ MobileDSL processor="MobileDSLDirectiveProcessor" requires="fileName='../train.mdsl'"  #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Drawing" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ include file="lib.tt"#>
//Generated material. Generating code in C#.

using System.Collections.Generic;

<# foreach (Controller controller in this.ComponentModel.Controllers) { #>

	public class <#= controller.Name #>  : Controller{ 

	enum <#= controller.Name #>State { 
      <# foreach (State state in controller.States) { #>
            <#= state.Name #>,
      <#}#>
    }
  private <#=controller.Name#>State controllerState =  
						<#=controller.Name#>State.<#insertMainState(controller);#>;

 	public override void action(){          
  	<#compileActionFunction(controller);#>
	}

	<# foreach (State state in controller.States) { #> 
	  <# foreach (ShowForm form in state.ShowForms) { #> 
				<#compileShowFormFunction(form);#>
      <#}#>
      <#compileRunState(state);#>
    <#}#>
	<#}#>
}

<#+	// 1 =======================================================  
private void insertMainState(Controller controller){
	IP ip = controller.IP.ChildConnections.ToArray()[0] as IP ;
	#><#= ip.Parent.Name#><#+
}

  	// 2 =======================================================  
private void compileActionFunction(Controller controller)  {#>
switch(controllerState){
<#+  
	foreach (State state in controller.States)
        {#> 
case <#=controller.Name#>State.<#=state.Name#>: 
run<#=state.Name#>();
break;
<#+}#>
}
<#+}
//	3====== ShowForm function generation  ================  
private void compileShowFormFunction(ShowForm form) {

	#> private void show<#= form.Name #>(Dictionary<string, object> dict){
		    <#+ 
				 foreach (Primitive pr in form.Primitives) {
					//if(pr.Parent != ""){ continue; }
				#>
					<#+ generatePrimitive(pr);#>
					<#+
				} //foreach

				foreach ( Event ev in form.Events ) {
  	 			#><#= ev.PrimitiveName #>. <#= ev.Type #> += (sender, args) => {
					 	<#+ foreach (C c in C.GetLinksToChildConnections(form)) {  
        			if(c.FromEvent != ev.Name){continue;}
							//connectWith(c.TargetConnectable, c);
							generate(c.TargetConnectable, c);
      			}#>
					 }; 
					 <#+			
				}
				#>
				var panel = new StackPanel {Children = {<#+ 
				
				foreach(Primitive pr in form.Primitives){
					if(pr.Parent == "")newCell(pr.Name, ','); 
				} 
				
				#> },};
				Screen.Content = panel;

	} <#+ // ### private void Show

}//$$$ compileShowFormFunction
//=======================================================  
private void connectWith(Connectable conn, C link) {
	if(conn.GetType() == typeof(Company.MobileDSL.OP)){
		OP oPort = conn as OP;
		if(link.NextController != ""){
		#> 
				this.app.currentController = <#=link.NextController#>.getInstance(this.app);
				this.app.changed = true;
		<#+
		}else{
			State state = oPort.Parent as State; 
			#> controllerState = <#=state.Controller.Name#>State.<#=link.NextState#>; <#+
		}
	}
}
//=======================================================  
private void compileRunState(State state) {
#> 
    private void run<#= state.Name#>(){
	<#+
	Connectable firstElement = getChild(state.IP, 0); //replace with getFirstChild
	var link = getFirstLink(state.IP);
	#>
	<#+
	generate(firstElement, link);#>
	}

<#+}//$$$ compileRunState

//=========================================================================
private C getLinkByCase(Connectable el, string str){
	foreach (C l in C.GetLinksToChildConnections(el)) {
      if (l.Case == str) return l;
	}
	return  null;
}

//============================================================
private void generate(Connectable el, C link){
	switch(el.GetType().ToString()){
		
		case "Company.MobileDSL.ShowForm": 
			ShowForm showForm = el as ShowForm;
			#>show<#= showForm.Name#>();<#+
			break;

		case "Company.MobileDSL.ServiceCall": 
			ServiceCall svcCall = el as ServiceCall;
			var connections = C.GetLinksToChildConnections(el);
			C conn = getElement(connections, 0);#>
			var <#= conn.Data #> = <#=svcCall.ServiceName#>.<#=svcCall.ServiceMethod#>(<#=link.Data#>); 
			<#+ generate(getFirstChild(el), getFirstLink(el));	
			break;
		
		case "Company.MobileDSL.UIDLink": 
			UIDLink dLink = el as UIDLink;#> 
			Dictionary<string, object> newDict = new Dictionary<string,object>(); 
			newDict["Invisibles"]="<#=dLink.Invisibles#>";
			<#+
			foreach (StringCode strCode in dLink.StringCodes) { 
					var arr = strCode.Text.Split('=');
					if(strCode.isDictKey != true){
					#> newDict["<#=arr[0]#>"]=<#=arr[1]#>; 
					<#+
					}else{
					#> newDict["<#=arr[0]#>"]=dict["<#=arr[1]#>"]; 
					<#+
					}
			}
			ShowForm nextForm = getFirstChild(el) as ShowForm;
			#>show<#= nextForm.Name#>(newDict);<#+
			break; 
		case "Company.MobileDSL.ConditionalBlock":
			ConditionalBlock cBlock = el as ConditionalBlock;
			#> if( <#= cBlock.Text #> ){ 
				<#+ 
				C trueLink = getLinkByCase(el, "True");
				generate(trueLink.TargetConnectable, trueLink);
				#>
			 } else {  
			 <#+ 
				C falseLink = getLinkByCase(el, "False");
				generate(falseLink.TargetConnectable, falseLink);
				#>
				
			 } <#+
			break;
		case "Company.MobileDSL.OP":
			OP oPort = el as OP;
			if(link.NextController != ""){
			#> 
					this.app.currentController = <#=link.NextController#>.getInstance(this.app);
					this.app.changed = true;
			<#+
			}else{
				State state = oPort.Parent as State; 
				#> controllerState = <#=state.Controller.Name#>State.<#=link.NextState#>; <#+
			}
			break;
	}
}
#>