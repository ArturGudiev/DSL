<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ MobileDSL processor="MobileDSLDirectiveProcessor" requires="fileName='../train.mdsl'"  #>
//Generated material. Generating code in C#.

<# foreach (Controller controller in this.ComponentModel.Controllers) { #>

	public class <#= controller.Name #>  : Controller{ 

	enum <#= controller.Name #>State { 
      <# foreach (State state in controller.States) { #>
            <#= state.Name #>,
      <#}#>
    }
  private <#=controller.Name#>State controllerState =  <#=controller.Name#>State.<#getMainState(controller);#>;

 	public override void action(){          
  	<#makeSwitchStatement(controller);#>
	}

	<# foreach (State state in controller.States) { #> 
//--------------------------------------------------
	  <# foreach (ShowForm form in state.ShowForms) { #> 
				<#compileShowFormFunction(form);#>
        
      <#}#>
      <#compileRunState(state);#>
	
    <#}#>
	<#}#>
}


<#+  //=======================================================  
private void getMainState(Controller controller){
	IP ip = controller.IP.ChildConnections.ToArray()[0] as IP ;
	#><#= ip.ClassWithPorts.Name#><#+
}

  //=======================================================  
private void makeSwitchStatement(Controller controller)  {#>
switch(controllerState){
<#+  
	foreach (State state in controller.States)
        {#> 
case <#=controller.Name#>State.<#=state.Name#>: 
run<#=state.Name#>();
break;
<#+}#>
}
<#+}
//====== ShowForm function generation  ================  
private void compileShowFormFunction(ShowForm form) {

	#> private void show<#= form.Name #>(){
		
		    <#+ foreach (Primitive pr in form.Primitives) {
					//if(pr.Parent != ""){ continue; }
				#>
					<#+generatePrimitive(pr);#>
					<#+
				} //foreach

				foreach ( Event ev in form.Events ) {
  	 			#><#= ev.PrimitiveName #>. <#= ev.Type #> += (sender, args) => {}; 
					 <#+			
				}

				#>
				var panel = {Children = {<#+ foreach(Primitive pr in form.Primitives){newCell(pr.Name, ','); } #> },};
				Screen.Content = panel;

	} <#+ // ### private void Show

}//$$$ compileShowFormFunction

//=============== Primitive Generation ===================  
private void generatePrimitive(Primitive primitive) {#>
	<#+ primitiveType(primitive);#>  <#= primitive.Name #> = <#+ 
	switch(primitive.GetType().ToString()){
		case "Company.MobileDSL.Button": 
			#>
							new Button{
							VerticalAlignment = VerticalAlignment.Center, 
							HorizontalAlignment = HorizontalAlignment.Center, 
							Background = new SolidColorBrush(Colors.Gray), 
							Foreground = new SolidColorBrush(Colors.Black), 
							Padding = new Thickness(Screen.NormalFontSize), 
							WrapContent = true, 
							Font = new Font(new FontFamily("Arial"), 0.5 * Screen.LargeFontSize), 
							Text = "<#= ((Company.MobileDSL.Button)primitive).Text #>"
					}; 
			<#+
			break;
		case "Company.MobileDSL.Label":
		#>
							new TextBlock{
                VerticalAlignment = VerticalAlignment.Center, 
                HorizontalAlignment = HorizontalAlignment.Center, 
                WrapContent = true, 
                Font = new Font(new FontFamily("Arial"), 16),
                Foreground = new SolidColorBrush(Colors.Black),
                Text = "<#=((Company.MobileDSL.Label)primitive).Text#>"
}							;
		<#+ 
			break;
		case "Company.MobileDSL.DropBox":
		#>
							new DropBox{
                VerticalAlignment = VerticalAlignment.Center,           
                HorizontalAlignment = HorizontalAlignment.Center,       
                Padding = new Thickness(Screen.NormalFontSize),        
                WrapContent = true,                                     
                Font = new Font(new FontFamily("Arial"), 0.5 * Screen.LargeFontSize),           
                ItemList =  new List<string>("<#=((Company.MobileDSL.DropBox)primitive).Items#>".Split('=')),
};
		<#+ 
			break;
		case "Company.MobileDSL.Input":
		#>
							new Input{
    VerticalAlignment = VerticalAlignment.Center, 
    HorizontalAlignment = HorizontalAlignment.Center, 
    Background = new SolidColorBrush(Colors.White), 
    Foreground = new SolidColorBrush(Colors.Black), 
    Padding = new Thickness(Screen.NormalFontSize), 
    WrapContent = true,
    Width = 150,
    Font = new Font(new FontFamily("Arial"), 12),
    InputMode = Ubiq.Graphics.InputMode.<#=((Company.MobileDSL.Input)primitive).InputMode#>,
    Text = ""};
		<#+ 
			break;
		case "Company.MobileDSL.ListBox":
		#>
							new ListBox{
                 Children = {}, 
};
		<#+ 
			break;
		case "Company.MobileDSL.StackPanel":
		string[] items = ((Company.MobileDSL.StackPanel)primitive).Items.Split(';');
		#> new StackPanel{ Orientation = Orientation.Horizontal, Children = {<#+ foreach(string str in items){newCell(str, ','); } #> }, }; 
		<#+ 
			break;
		default:
			#>// No such element<#+WriteLine(""); 
			break;
	}
#>
<#+
}
//=======================================================  
private void compileRunState(State state) {
#> 
    private void run<#= state.Name#>(){
	<#+
	Connectable firstElement = getChild(state.IP, 0); 
	
	generate(firstElement);#>
	}

<#+}//$$$ compileRunState

//============================================================
private void generate(Connectable el){
	if(isShowForm(el)){
		ShowForm showForm = el as ShowForm;
		#>show<#= showForm.Name#>();<#+
	}
}

//============================================================
private bool isShowForm(Connectable connectable) {
	return connectable.GetType().ToString().Contains("ShowForm");
}

//============================================================
private Connectable getChild(Connectable connectable, int index){
	return connectable.ChildConnections.ToArray()[index];
}

//=============== new Cell generation for StackPanel Children ====
private void newCell(string str, char c){
	#>new Cell{Content = <#= str #>} <#= c #>
				<#+ 
}

//=======================================================  
private void primitiveType(Primitive prim)  
{  #>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.Button)) {#>Button<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.Label)) {#>TextBlock<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.Input)) {#>Input<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.DropBox)) {#>DropBox<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.StackPanel)) {#>StackPanel<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.ListBox)) {#>ListBox<#+}#>
<#+}
#>