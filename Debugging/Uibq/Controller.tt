<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ MobileDSL processor="MobileDSLDirectiveProcessor" requires="fileName='../train.mdsl'"  #>
//Generated material. Generating code in C#.

<# foreach (Controller controller in this.ComponentModel.Controllers) { #>

	public class <#= controller.Name #>  : Controller{ 

	enum <#= controller.Name #>State { 
      <# foreach (State state in controller.States) { #>
            <#= state.Name #>,
      <#}#>
    }
  private <#=controller.Name#>State controllerState =  <#=controller.Name#>State.<#getMainState(controller);#>;

 	public override void action(){          
  	<#makeSwitchStatement(controller);#>
	}

	<# foreach (State state in controller.States) { #> 
//--------------------------------------------------
	  <# foreach (ShowForm form in state.ShowForms) { #> 
				<#compileShowFormFunction(form);#>
        
      <#}#>
      <#compileRunState(state);#>
	
    <#}#>
	<#}#>
}


<#+  //=======================================================  
private void getMainState(Controller controller){
	IP ip = controller.IP.ChildConnections.ToArray()[0] as IP ;
	#><#= ip.ClassWithPorts.Name#><#+
}

  //=======================================================  
private void makeSwitchStatement(Controller controller)  {#>
switch(controllerState){
<#+  
	foreach (State state in controller.States)
        {#> 
case <#=controller.Name#>State.<#=state.Name#>: 
run<#=state.Name#>();
break;
<#+}#>
}
<#+}
//====== ShowForm function generation  ================  
private void compileShowFormFunction(ShowForm form) {

	#> private void show<#= form.Name #>(){
		
		    <#+ foreach (Primitive pr in form.Primitives) {#>
					<#+generatePrimitive(pr);#>
					<#+
				} //foreach#>
	} <#+ // ### private void Show

}//$$$ compileShowFormFunction

//=============== Primitive Generation ===================  
private void generatePrimitive(Primitive primitive) {#>
	<#= primitive.Name #>; //<#= primitive.GetType() #> <#+ primitiveType(primitive);#>
<#+
}
//=======================================================  
private void compileRunState(State state) {
#> 
    private void run<#= state.Name#>(){
	<#+
	Connectable firstElement = getChild(state.IP, 0); 
	
	generate(firstElement);#>
	}

<#+}//$$$ compileRunState

//============================================================
private void generate(Connectable el){
	if(isShowForm(el)){
		ShowForm showForm = el as ShowForm;
		#>show<#= showForm.Name#>();<#+
	}
}

//============================================================
private bool isShowForm(Connectable connectable) {
	return connectable.GetType().ToString().Contains("ShowForm");
}

//============================================================
private Connectable getChild(Connectable connectable, int index){
	return connectable.ChildConnections.ToArray()[index];
}

//=======================================================  
private void primitiveType(Primitive prim)  
{  #>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.Button)) {#>Button<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.Label)) {#>TextBlock<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.Input)) {#>StackPanel<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.ComboBox)) {#>DropBox<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.StackPanel)) {#>StackPanel<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.ListBox)) {#>ListBox<#+}#>
<#+}

#>
