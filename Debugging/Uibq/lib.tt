	<#@ import namespace="System.Drawing" #>
	
<#@ import namespace="System.Collections.Generic" #>
	<#+
//=====================================================================
private State getMainState(Controller controller){
	IP ip = controller.IP.ChildConnections.ToArray()[0] as IP ;
	return ip.Parent as State;
}
//=====================================================================
private void generateListBox(ListBox listBox){
	#> new ListBox{ Children = {}, }; 
	<#+ 
}
//=====================================================================
private void generateButton(Button btn){
				#>
			new Button{
			Visibility = dict["Invisibles"].Contains("<#=btn.Name#>") ? Visibility.Hidden : Visibility.Visible;
			VerticalAlignment = VerticalAlignment.Center, 
			HorizontalAlignment = HorizontalAlignment.Center, 
			Background = new SolidColorBrush(Colors.Gray), 
			Foreground = new SolidColorBrush(Colors.Black), 
			Padding = new Thickness(Screen.NormalFontSize), 
			WrapContent = true, 
			Font = new Font(new FontFamily("Arial"), 0.5 * Screen.LargeFontSize), 
			Text = dict.Contains("<#=btn.Name#>") ? dict["<#=btn.Name#>"] : "<#=btn.Text#>",
	}; 
			<#+
}
//=====================================================================
private void generateInput(Input input){
	#>
							new Input{
		Visibility = dict["Invisibles"].Contains("<#=input.Name#>") ? Visibility.Hidden : Visibility.Visible;
    VerticalAlignment = VerticalAlignment.Center, 
    HorizontalAlignment = HorizontalAlignment.Center, 
    Background = new SolidColorBrush(Colors.White), 
    Foreground = new SolidColorBrush(Colors.Black), 
    Padding = new Thickness(Screen.NormalFontSize), 
    WrapContent = true,
    Width = 150,
    Font = new Font(new FontFamily("Arial"), 12),
    InputMode = Ubiq.Graphics.InputMode.<#=input.InputMode#>,
    Text = "",};
		<#+ 
}
//=====================================================================
private void generateDropBox(DropBox dropBox){
	#>
							new DropBox{
								Visibility = dict["Invisibles"].Contains("<#=dropBox.Name#>") ? Visibility.Hidden : Visibility.Visible;
                VerticalAlignment = VerticalAlignment.Center,           
                HorizontalAlignment = HorizontalAlignment.Center,       
                Padding = new Thickness(Screen.NormalFontSize),        
                WrapContent = true,                                     
                Font = new Font(new FontFamily("Arial"), 0.5 * Screen.LargeFontSize),           
				ItemList = dict.Contains("<#=dropBox.Name#>") ? dict["<#=dropBox.Name#>"] : new List<string>("<#=dropBox.Items#>".Split('=')),
,
};
		<#+ 
}
//=====================================================================
private void generateStackPanel(StackPanel stackPanel){
		#> new StackPanel{ 
		Visibility = dict["Invisibles"].Contains("<#=stackPanel.Name#>") ? Visibility.Hidden : Visibility.Visible;
		Orientation = Orientation.Horizontal, Children = 
		{<#+ foreach(Primitive pr in stackPanel.ShowForm.Primitives){
				if(pr.Parent != stackPanel.Name) continue;
				newCell(pr.Name, ','); 
			} #> }, }; 
		<#+ 
}
//=====================================================================
private void generateLabel(Label label){
		#>
				new TextBlock{
								Visibility = dict["Invisibles"].Contains("<#=label.Name#>") ? Visibility.Hidden : Visibility.Visible;
                VerticalAlignment = VerticalAlignment.Center, 
                HorizontalAlignment = HorizontalAlignment.Center, 
                WrapContent = true, 
                Font = new Font(new FontFamily("Arial"), 16),
                Foreground = new SolidColorBrush(Colors.<#=label.Color#>),
                Text = dict.Contains("<#=label.Name#>") ? dict["<#=label.Name#>"] : "<#=label.Text#>",
		};
		<#+ 
}
//=====================================================================
//=============== Primitive Generation ===================  
private void generatePrimitive(Primitive primitive) {
	primitiveType(primitive); #> <#= primitive.Name #> = <#+ 
	switch(primitive.GetType().ToString()){
		case "Company.MobileDSL.Button": 
			Button button = (Company.MobileDSL.Button)primitive;
			generateButton(button);
			break;
		case "Company.MobileDSL.Label":
			Label label = (Company.MobileDSL.Label)primitive;
			generateLabel(label);
			break;
		case "Company.MobileDSL.DropBox":
			DropBox dropBox = (Company.MobileDSL.DropBox)primitive;
			generateDropBox(dropBox);
			break;
		case "Company.MobileDSL.Input":
			Input input = (Company.MobileDSL.Input)primitive;
			generateInput(input);
			break;
		case "Company.MobileDSL.ListBox":
			ListBox listBox = (Company.MobileDSL.ListBox)primitive;
			generateListBox(listBox);
			break;
		case "Company.MobileDSL.StackPanel":
			StackPanel sPanel = (Company.MobileDSL.StackPanel)primitive;
			generateStackPanel(sPanel);
			break;
		default:
			#>// No such element<#+WriteLine(""); 
			break;
	}
#>
<#+
}
//=============== new Cell generation for StackPanel Children ====
private void newCell(string str, char c){
	#>new Cell{Content = <#= str #>} <#= c #>
				<#+ 
}
//======================================================================================
private void primitiveType(Primitive prim)  
{  #>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.Button)) {#>Button<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.Label)) {#>TextBlock<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.Input)) {#>Input<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.DropBox)) {#>DropBox<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.StackPanel)) {#>StackPanel<#+}#>
<#+ if(prim.GetType() == typeof(Company.MobileDSL.ListBox)) {#>ListBox<#+}#>
<#+}
//======================================================================================
private List<string> getAllServiceCalls(Controller[] controllers){
	List<string> services = new List<string>();
	//var controllers = this.ComponentModel.Controllers.ToArray(); 
	Array.ForEach(controllers, controller => {
		var states = controller.States.ToArray();
		Array.ForEach(states, state => {
			var serviceCalls = state.ServiceCalls.ToArray();
			Array.ForEach(serviceCalls, sc => services.Add(sc.ServiceName));
		});
	}
	);
	return services;
}

//========================= Print Class Properties ==============================
private void printProperties(Type t){
	foreach ( PropertyInfo pInfo in t.GetProperties() ) {
								#><#= pInfo.Name #> ||| <#+ 
							}
}
//============================================================
private C getFirstLink(Connectable el){
	return getLink(el, 0);
}

//==================================================================
private bool isShowForm(Connectable connectable) {
	return connectable.GetType().ToString().Contains("ShowForm");
}

private bool isServiceCall(Connectable connectable){
	return connectable.GetType().ToString().Contains("ServiceCall");
}

//============================================================
private Connectable getChild(Connectable connectable, int index){
	return connectable.ChildConnections.ToArray()[index];
}
//=========================================================================
private Connectable getFirstChild(Connectable el){
	return getChild(el, 0);
}
//=========================================================================
private ReadOnlyCollection<C> getConnections(Connectable el){
	return  C.GetLinksToChildConnections(el);
}
//=========================================================================
private C getElement(ReadOnlyCollection<C> coll, int index){
	int i = 0; 
	foreach (C c in coll) {  
      if(i++ == index) return c;
	}
	return  null;
}
//=========================================================================
private C getLink(Connectable el, int index){
	int i = 0; 
	foreach (C c in C.GetLinksToChildConnections(el)) {  
      if(i++ == index) return c;
	}
	return  null;
}
#>
